#' @importFrom grDevices chull col2rgb rainbow rgb
#' @importFrom rnaturalearth ne_countries
#' @importFrom ggplot2 theme_bw coord_cartesian labs geom_sf coord_sf geom_point geom_segment geom_polygon guides guide_legend scale_color_hue scale_x_continuous scale_color_manual
#' @importFrom dplyr %>% mutate as_tibble filter pull group_split .data
#' @importFrom sf sf_use_s2 st_intersection st_bbox st_as_sfc st_transform st_cast st_convex_hull st_union
#' @export siteMap
siteMap <- function(crds, site, type = "points", quantiles = c(0.25, 0.75), xlim = NULL, ylim = NULL, hull = TRUE, palette = 'rainbow', ...) {
args <- list(...)
if(nrow(crds)!=length(site)) stop("The number of coordinates does not match length of site vector.")
world <- ne_countries(scale = "medium", returnclass = "sf")
dat   <- crds %>% as_tibble() %>% mutate(site=site) %>%
filter(!is.nan(.data$lat) & site>0)
if(is.null(xlim) | is.null(ylim)) {
word_sub <- world %>%
st_intersection(st_bbox(dat %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326)) %>%
st_as_sfc())  %>%
suppressWarnings() %>%
suppressMessages()
} else {
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(c(xmin = xlim[1], xmax = xlim[2],
ymin = ylim[1], ymax = ylim[2]), crs = 4326) %>%
st_as_sfc()) %>%
suppressWarnings() %>%
suppressMessages()
}
colorSites <- do.call(palette, args = list(n = length(unique(dat$site))))
#### ToDo: Theme - axis not more than map
base <- ggplot() +
theme_bw() +
labs(x = ifelse(sum(names(args) %in% "xlab") == 1, args$xlab, "Longitude"),
y = ifelse(sum(names(args) %in% "ylab") == 1, args$ylab, "Latitude"),
title = ifelse(sum(names(args) %in% "main") == 1, args$main, "")) +
geom_sf(data = word_sub, fill = "lightgray", color = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
if(type == "points") {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
gg <- base +
geom_sf(data = dat_sf, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(type == "cross") {
dat_cross <- dat %>% group_split(site) %>%
lapply(., function(x) {
x[,1:2] %>% apply(., 2, function(y) quantile(y, probs =  c(quantiles, 0.5), na.rm = T)) %>%
as_tibble() %>% mutate(probs =  c(quantiles, 0.5), site = (x %>% pull(site))[1])
}) %>% Reduce('rbind', .)
dat_pts <- dat_cross %>% filter(.data$probs == 0.5) %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_lns <- dat_cross %>% group_split(site) %>%
lapply(., function(x) {
c(c(st_point(as.numeric(c(x[1,1], x[3,2]))),
st_point(as.numeric(c(x[2,1], x[3,2])))) %>% st_cast('LINESTRING'),
c(st_point(as.numeric(c(x[3,1], x[1,2]))),
st_point(as.numeric(c(x[3,1], x[2,2])))) %>% st_cast('LINESTRING')) %>%
st_sfc() %>% st_sf() %>% mutate(site = x$site[1])
}) %>% Reduce('rbind',.) %>% st_set_crs(4326)
gg <- base +
geom_sf(data = dat_pts, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
geom_sf(data = dat_lns, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
linewidth = ifelse(any(names(args) == "linewidth"),
args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(hull) {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_hull <- dat_sf %>%
group_split(site) %>%
lapply(., function(x) {
st_convex_hull(st_union(x[,2])) %>%
st_sfc() %>%
st_sf() %>%
mutate(site = x$site[1])
})  %>%
Reduce('rbind',.) %>% suppressMessages()
#st_set_crs(4326)
gg <- gg +
geom_sf(data = dat_hull,
mapping = aes(geometry = .data$geometry, color = as.factor(site)),
alpha = ifelse(any(names(args) == "alpha"), args$alpha, 0.1),
linewidth = ifelse(any(names(args) == "linewidth"), args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE))
}
print(gg)
}
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
#' site <- changeLight(hoopoe2, rise.prob = 0.1, set.prob = 0.1, plot = FALSE,
#' summary = FALSE)$site
#'siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
#'
#' @importFrom grDevices chull col2rgb rainbow rgb
#' @importFrom rnaturalearth ne_countries
#' @importFrom ggplot2 theme_bw coord_cartesian labs geom_sf coord_sf geom_point geom_segment geom_polygon guides guide_legend scale_color_hue scale_x_continuous scale_color_manual
#' @importFrom dplyr %>% mutate as_tibble filter pull group_split .data
#' @importFrom sf sf_use_s2 st_intersection st_bbox st_as_sfc st_transform st_cast st_convex_hull st_union
#' @export siteMap
siteMap <- function(crds, site, type = "points", quantiles = c(0.25, 0.75), xlim = NULL, ylim = NULL, hull = TRUE, palette = 'rainbow', ...) {
args <- list(...)
if(nrow(crds)!=length(site)) stop("The number of coordinates does not match length of site vector.")
world <- ne_countries(scale = "medium", returnclass = "sf")
dat   <- crds %>% as_tibble() %>% mutate(site=site) %>%
filter(!is.nan(.data$lat) & site>0)
if(is.null(xlim) | is.null(ylim)) {
word_sub <- world %>%
st_intersection(st_bbox(dat %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326)) %>%
st_as_sfc())  %>%
suppressWarnings() %>%
suppressMessages()
} else {
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(c(xmin = xlim[1], xmax = xlim[2],
ymin = ylim[1], ymax = ylim[2]), crs = 4326) %>%
st_as_sfc()) %>%
suppressWarnings() %>%
suppressMessages()
}
colorSites <- do.call(palette, args = list(n = length(unique(dat$site))))
#### ToDo: Theme - axis not more than map
base <- ggplot() +
theme_bw() +
labs(x = ifelse(sum(names(args) %in% "xlab") == 1, args$xlab, "Longitude"),
y = ifelse(sum(names(args) %in% "ylab") == 1, args$ylab, "Latitude"),
title = ifelse(sum(names(args) %in% "main") == 1, args$main, "")) +
geom_sf(data = word_sub, fill = "lightgray", color = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
if(type == "points") {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
gg <- base +
geom_sf(data = dat_sf, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(type == "cross") {
dat_cross <- dat %>% group_split(site) %>%
lapply(., function(x) {
x[,1:2] %>% apply(., 2, function(y) quantile(y, probs =  c(quantiles, 0.5), na.rm = T)) %>%
as_tibble() %>% mutate(probs =  c(quantiles, 0.5), site = (x %>% pull(site))[1])
}) %>% Reduce('rbind', .)
dat_pts <- dat_cross %>% filter(.data$probs == 0.5) %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_lns <- dat_cross %>% group_split(site) %>%
lapply(., function(x) {
c(c(st_point(as.numeric(c(x[1,1], x[3,2]))),
st_point(as.numeric(c(x[2,1], x[3,2])))) %>% st_cast('LINESTRING'),
c(st_point(as.numeric(c(x[3,1], x[1,2]))),
st_point(as.numeric(c(x[3,1], x[2,2])))) %>% st_cast('LINESTRING')) %>%
st_sfc() %>% st_sf() %>% mutate(site = x$site[1])
}) %>% Reduce('rbind',.) %>% st_set_crs(4326)
gg <- base +
geom_sf(data = dat_pts, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
geom_sf(data = dat_lns, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
linewidth = ifelse(any(names(args) == "linewidth"),
args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(hull) {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_hull <- dat_sf %>%
group_split(site) %>%
lapply(., function(x) {
st_convex_hull(st_union(x[,2])) %>%
st_sfc() %>%
st_sf() %>%
mutate(site = x$site[1])
})  %>%
Reduce('rbind',.) %>% suppressMessages()
#st_set_crs(4326)
gg <- gg +
geom_sf(data = dat_hull,
mapping = aes(geometry = .data$geometry, color = as.factor(site)),
alpha = ifelse(any(names(args) == "alpha"), args$alpha, 0.1),
linewidth = ifelse(any(names(args) == "linewidth"), args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE))
}
print(gg)
}
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
siteMap(crds, site, linewidth=2, shape=20, size=0.5, main="hoopoe2")
word_sub <- world %>%
st_intersection(st_bbox(dat %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326)) %>%
st_as_sfc())  %>%
suppressWarnings() %>%
suppressMessages()
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(dat %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326)) %>%
st_as_sfc())  %>%
suppressWarnings() %>%
suppressMessages()
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(c(xmin = xlim[1], xmax = xlim[2],
ymin = ylim[1], ymax = ylim[2]), crs = 4326) %>%
st_as_sfc()) %>%
suppressWarnings() %>%
suppressMessages()
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
filter <- distanceFilter(hoopoe2, distance = 30)
site <- changeLight(hoopoe2, rise.prob = 0.1, set.prob = 0.1, plot = FALSE,
summary = FALSE)$site
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
#' site <- changeLight(hoopoe2, rise.prob = 0.1, set.prob = 0.1, plot = FALSE,
#' summary = FALSE)$site
#'siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
#'
#' @importFrom grDevices chull col2rgb rainbow rgb
#' @importFrom rnaturalearth ne_countries
#' @importFrom ggplot2 theme_bw coord_cartesian labs geom_sf coord_sf geom_point geom_segment geom_polygon guides guide_legend scale_color_hue scale_x_continuous scale_color_manual
#' @importFrom dplyr %>% mutate as_tibble filter pull group_split .data
#' @importFrom sf sf_use_s2 st_intersection st_bbox st_as_sfc st_transform st_cast st_convex_hull st_union
#' @export siteMap
siteMap <- function(crds, site, type = "points", quantiles = c(0.25, 0.75), xlim = NULL, ylim = NULL, hull = TRUE, palette = 'rainbow', ...) {
args <- list(...)
if(nrow(crds)!=length(site)) stop("The number of coordinates does not match length of site vector.")
world <- ne_countries(scale = "medium", returnclass = "sf")
dat   <- crds %>% as_tibble() %>% mutate(site=site) %>%
filter(!is.nan(.data$lat) & site>0)
if(is.null(xlim) | is.null(ylim)) {
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(dat %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326)) %>%
st_as_sfc())  %>%
suppressWarnings() %>%
suppressMessages()
} else {
word_sub <- world %>%
st_make_valid() %>%
st_intersection(st_bbox(c(xmin = xlim[1], xmax = xlim[2],
ymin = ylim[1], ymax = ylim[2]), crs = 4326) %>%
st_as_sfc()) %>%
suppressWarnings() %>%
suppressMessages()
}
colorSites <- do.call(palette, args = list(n = length(unique(dat$site))))
#### ToDo: Theme - axis not more than map
base <- ggplot() +
theme_bw() +
labs(x = ifelse(sum(names(args) %in% "xlab") == 1, args$xlab, "Longitude"),
y = ifelse(sum(names(args) %in% "ylab") == 1, args$ylab, "Latitude"),
title = ifelse(sum(names(args) %in% "main") == 1, args$main, "")) +
geom_sf(data = word_sub, fill = "lightgray", color = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
if(type == "points") {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
gg <- base +
geom_sf(data = dat_sf, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(type == "cross") {
dat_cross <- dat %>% group_split(site) %>%
lapply(., function(x) {
x[,1:2] %>% apply(., 2, function(y) quantile(y, probs =  c(quantiles, 0.5), na.rm = T)) %>%
as_tibble() %>% mutate(probs =  c(quantiles, 0.5), site = (x %>% pull(site))[1])
}) %>% Reduce('rbind', .)
dat_pts <- dat_cross %>% filter(.data$probs == 0.5) %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_lns <- dat_cross %>% group_split(site) %>%
lapply(., function(x) {
c(c(st_point(as.numeric(c(x[1,1], x[3,2]))),
st_point(as.numeric(c(x[2,1], x[3,2])))) %>% st_cast('LINESTRING'),
c(st_point(as.numeric(c(x[3,1], x[1,2]))),
st_point(as.numeric(c(x[3,1], x[2,2])))) %>% st_cast('LINESTRING')) %>%
st_sfc() %>% st_sf() %>% mutate(site = x$site[1])
}) %>% Reduce('rbind',.) %>% st_set_crs(4326)
gg <- base +
geom_sf(data = dat_pts, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
size = ifelse(any(names(args) == "size"),
args$size, 0.5),
shape = ifelse(any(names(args) == "shape"), args$shape, 16),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
geom_sf(data = dat_lns, mapping = aes(geometry = .data$geometry, color = as.factor(site)),
linewidth = ifelse(any(names(args) == "linewidth"),
args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE)) +
scale_color_manual(values = colorSites)
}
if(hull) {
dat_sf <- dat %>% st_as_sf(coords = c('lon', 'lat'), crs = 4326)
dat_hull <- dat_sf %>%
group_split(site) %>%
lapply(., function(x) {
st_convex_hull(st_union(x[,2])) %>%
st_sfc() %>%
st_sf() %>%
mutate(site = x$site[1])
})  %>%
Reduce('rbind',.) %>% suppressMessages()
#st_set_crs(4326)
gg <- gg +
geom_sf(data = dat_hull,
mapping = aes(geometry = .data$geometry, color = as.factor(site)),
alpha = ifelse(any(names(args) == "alpha"), args$alpha, 0.1),
linewidth = ifelse(any(names(args) == "linewidth"), args$linewidth, 0.5),
linetype = ifelse(any(names(args) == "linetype"), args$linetype, 1),
show.legend = ifelse(any(names(args) == "show.legend"), args$show.legend, FALSE))
}
print(gg)
}
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
check()
check()
check()
check()
check()
check()
check()
check()
check()
?GeoLight
library(GeoLight)
?Gelight
?GeoLight
??GeoLight
check()
document()
check()
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
?GeoLight
?coord
?changeLight
library(GeoLight )
?GeoLight
library(GeoLight )
library(GeoLight )
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
?GeoLight
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
?GeoLight
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
?coord
?getElevation
?coord2
??coord2
library(GeoLight )
?GeoLight
check()
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
library(GeoLight )
?GeoLight
library(utils)
bibentry()
bibentry
citHeader
bibentry(
header = "To cite the R package 'GeoLight' in publications use:",
)
bibentry(
header = "To cite the R package 'GeoLight' in publications use:",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059")
bibentry(
bibytype = "Article"
header = "To cite the R package 'GeoLight' in publications use:",
bibentry(
bibytype = "Article",
header = "To cite the R package 'GeoLight' in publications use:",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059")
bibentry(
bibtype = "Article",
header = "To cite the R package 'GeoLight' in publications use:",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059")
bibentry(
bibtype = "Article",
header = "To cite the R package 'GeoLight' in publications use:",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059")
test <- bibentry(
bibtype = "Article",
header = "To cite the R package 'GeoLight' in publications use:",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059")
print(test)
test <- bibentry(
header = "To cite the R package 'GeoLight' in publications use:",
bibtype = "Article",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059"
)
print(test)
test <- bibentry(
mheader = "To cite the R package 'GeoLight' in publications use:",
bibtype = "Article",
title = "GeoLight - processing and analysing light-based geolocation in R",
author = c(person("Simeon Lisovski"),
person("Steffen Hahn")),
year = 2012,
journal = "Methods in Ecology and Evolution",
textVersion = "Lisovski, S. and Hahn, S. (2013) GeoLight - processing and analysing light-based geolocation in R. Methods in Ecology and Evolution, 3, 1055-1059"
)
print(test)
library(devtools)
print(test)
check_rhub()
check_rhub(email = NULL)
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
library(GeoLight)
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
filter <- distanceFilter(hoopoe2, distance = 30)
site <- changeLight(hoopoe2, rise.prob = 0.1, set.prob = 0.1, plot = FALSE,
summary = FALSE)$site
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
library(GeoLight)
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
filter <- distanceFilter(hoopoe2, distance = 30)
site <- changeLight(hoopoe2, rise.prob = 0.1, set.prob = 0.1, plot = FALSE,
summary = FALSE)$site
siteMap(crds[filter,], site[filter], linewidth=2, shape=20, size=0.5, main="hoopoe2")
world <- ne_countries(scale = "medium", returnclass = "sf")
rnaturalearth::ne_countries()
rnaturalearth::check_rnaturalearthdata()
library(GeoLight )
data(calib2)
calib2$tFirst  <- as.POSIXct(calib2$tFirst, tz = "GMT")
calib2$tSecond <- as.POSIXct(calib2$tSecond, tz = "GMT")
getElevation(calib2, known.coord = c(7.1,46.3))
