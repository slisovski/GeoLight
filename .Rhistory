min.r <- aggregate(as.numeric(tab$tFirst[out$site>0]),
by = list(out$site[out$site>0]),
FUN = function(x) min(x))
max.r <- aggregate(as.numeric(tab$tFirst[out$site>0]),
by = list(out$site[out$site>0]),
FUN = function(x) max(x))
# New part of code necessary for histogram + rectangles
min.r[, 2] <- as.POSIXct(min.r[, 2],
origin = "1970-01-01",
tz = "UTC")
max.r[, 2] <- as.POSIXct(max.r[, 2],
origin = "1970-01-01",
tz = "UTC")
# Histogroam without rectangles
histogram <-  ggplot() +
geom_line(aes(x = tab[, 1] + (tab[, 2] - tab[, 1])/2,
y = ifelse(out$site > 0, 1, 0))) +
scale_y_continuous(limits = c(0, 1.5))
# Add rectangles to histogram
hist_rect <- histogram +
geom_rect(aes(xmin = min.r[, 2],
xmax = max.r[, 2],
ymin = 1.1,
ymax = 1.4),
fill = "grey30",
color = "transparent",
size = 0) +
geom_rect(
aes(xmin = min.r[, 2],
xmax = max.r[, 2],
ymin = 1.1,
ymax = 1.4),
fill = ifelse(unique(out$site[out$site > 0]) %in% unique(tmp02[tmp02$fixed, 8]), "red", "transparent"),
color = "transparent",
size = 0,
alpha = 0.5
) +
theme_bw() +
labs(x = "",
y = "") +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
# sunrise sunset plot
axis_increase <- 7 #increase two have sunrise and sunset on equal height in plot
rise_set <- ggplot() +
geom_line(data = tw_rise,
aes(x = sr,
y = rise),
size = 2,
color = "firebrick",
lwd = 0.5) +
geom_line(data = tw_set,
aes(x = ss,
y = set + axis_increase),
color = "cornflowerblue",
size = 2,
lwd = 0.5) +
scale_y_continuous(name = "Sunrise (red)",
sec.axis = sec_axis(~.-axis_increase,
name="Sunset (blue)")) +
scale_x_datetime(name = "",
breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y") +
theme_bw() +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_blank(),
axis.text.x = element_blank())
poc_red <- ggplot() +
geom_bar(aes(x = sr,
y = tab1[, 2]),
stat = "identity",
color = "firebrick") +
labs(x = "",
subtitle = "Sunrise",
y = "Probabilty of change") +
theme_bw() +
theme (panel.background = element_rect(fill = "white"),
axis.text.x = element_blank(),
panel.grid = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
if (is.numeric(rise.prob)) {
poc_red +
geom_hline(yintercept = rise.prob,
lty = 2,
lwd = 1.5)
}
poc_blue <- ggplot()+
geom_bar(aes(x = ss,
y = tab2[, 2]),
stat = "identity",
color = "cornflowerblue") +
labs(x = "Time",
subtitle = "Sunset",
y = "Probabilty of change") +
theme_bw() +
theme (panel.background = element_rect(fill = "white"),
panel.grid = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
if (is.numeric(set.prob))
poc_blue +
geom_hline(yintercept = set.prob, lty = 2, lwd = 1.5)
#print( hist_rect / (rise_set) / (poc_red) / (poc_blue)) # use of patchwork syntax to show all plots below each other
print(wrap_plots(hist_rect / (rise_set) / (poc_red) / (poc_blue)))
} else {
def.par <- par(no.readonly = TRUE)
nf <- layout(matrix(c(4, 1, 2, 3), nrow = 4, byrow = T),
heights = c(0.5, 1, 0.5, 0.5))
par(mar = c(2, 4.5, 2, 5), cex.lab = 1.5, cex.axis = 1.5,
bty = "o")
rise[tw$fixed[tw$type==1]] <- NA
plot(sr, rise,
type = "o", cex = 0.2, col = "firebrick",
ylab = "Sunrise (red)", xlim = range(sr), xaxt = "n")
par(new = T)
set[tw$fixed[tw$type==2]] <- NA
plot(ss, set, type = "o", cex = 0.2, col = "cornflowerblue",
xaxt = "n", yaxt = "n", xlab = "", ylab = "", xlim = range(ss))
axis(4)
mtext("Sunset (blue)", 4, line = 2.7, cex = 1)
axis(1, at = seq(min(ss), max(ss), by = (10 * 24 * 60 *
60)), labels = F)
axis(1, at = seq(min(ss), max(ss), by = (30 * 24 * 60 *
60)), lwd.ticks = 2, labels = trunc(seq(min(ss),
max(ss), by = (30 * 24 * 60 * 60)), "days"), cex.axis = 1)
par(mar = c(1.5, 4.5, 0.8, 5), bty = "n")
plot(sr, tab1[, 2], type = "h", lwd = 4, col = "firebrick",
ylab = "", xaxt = "n", xlim = range(sr), ylim = c(0,
max(na.omit(c(tab1[, 2], tab2[, 2])))))
if (is.numeric(rise.prob))
abline(h = rise.prob, lty = 2, lwd = 1.5)
opar <- par(mar = c(1.5, 4.5, 0.8, 5), bty = "n")
plot(ss, tab2[, 2], type = "h", lwd = 4, col = "cornflowerblue",
ylab = "", xaxt = "n", xlim = range(ss), ylim = c(0,
max(na.omit(c(tab1[, 2], tab2[, 2])))))
if (is.numeric(set.prob))
abline(h = set.prob, lty = 2, lwd = 1.5)
mtext("Probability of change", side = 2, at = max(na.omit(c(tab1[,
2], tab2[, 2]))), line = 3)
par(mar = c(1, 4.5, 1, 5), bty = "o")
mig <- out$site
mig[mig > 0] <- 1
plot(tab[, 1] + (tab[, 2] - tab[, 1])/2, ifelse(out$site >
0, 1, 0), type = "l", yaxt = "n", ylab = NA, ylim = c(0,1.5))
min.r <- aggregate(as.numeric(tab$tFirst[out$site>0]), by = list(out$site[out$site>0]), FUN = function(x) min(x))
max.r <- aggregate(as.numeric(tab$tFirst[out$site>0]), by = list(out$site[out$site>0]), FUN = function(x) max(x))
rect(min.r[,2], 1.1, max.r[,2], 1.4, col = "grey90", lwd = 0)
rect(min.r[,2], 1.1, max.r[,2], 1.4, col = ifelse(unique(out$site[out$site>0])%in%unique(tmp02[tmp02$fixed, 8]), "red", "transparent"),
density = 60)
par(def.par)
}
}
if (summary) {
i.sum.Cl(out)
}
return(out)
}
cL <- changeLight(twl$tFirst, twl$tSecond, type = twl$type, quantile=0.95, summary = F, days = 2)
##'   hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
##'   hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
##' residency <- changeLight(hoopoe2, quantile=0.9)
##'
##' @importFrom changepoint cpt.mean cpts.full pen.value.full
##' @importFrom stats na.omit quantile aggregate
##' @importFrom graphics abline axis layout mtext par plot rect
##' @importFrom ggplot2 ggplot aes geom_line scale_y_continuous geom_rect theme_bw labs theme element_rect element_blank scale_x_datetime sec_axis geom_bar geom_hline
##' @importFrom patchwork wrap_plots
##' @export changeLight
changeLight <- function (tFirst, tSecond, type, twl, quantile = 0.9, rise.prob = NA,
set.prob = NA, days = 5, fixed = NULL, plot = TRUE, ggplot= TRUE, summary = TRUE) {
tab <- i.argCheck(as.list(environment())[sapply(environment(),
FUN = function(x) any(class(x) != "name"))])
if(is.null(fixed)) fixed <- matrix(FALSE, ncol = 2, nrow = nrow(tab))
tw <- data.frame(datetime = as.POSIXct(c(as.numeric(tab$tFirst), as.numeric(tab$tSecond)), origin = "1970-01-01", "GMT"),
type = c(tab$type, ifelse(tab$type == 1, 2, 1)), row = rep(1:nrow(tab), 2),
fixed = c(fixed[,1], fixed[,2]))
tw <- tw[!duplicated(tw$datetime), ]
tw <- tw[order(tw[, 1]), ]
hours <- as.numeric(format(tw[, 1], "%H")) + as.numeric(format(tw[,1], "%M"))/60
for (t in 1:2) {
cor <- rep(NA, 24)
for (i in 0:23) {
cor[i + 1] <- max(abs((c(hours[tw$type == t][1],
hours[tw$type == t]) + i)%%24 - (c(hours[tw$type == t],
hours[tw$type == t][length(hours)]) + i)%%24), na.rm = T)
}
hours[tw$type == t] <- (hours[tw$type == t] + (which.min(round(cor, 2))) - 1)%%24
}
sr <- tw[tw[, 2]==1, 1]
ss <- tw[tw[, 2]==2, 1]
rise <- hours[tw[, 2] == 1]
set  <- hours[tw[, 2] == 2]
CPs1 <- suppressWarnings(cpt.mean(rise, method = "BinSeg",
Q = length(rise)/2, penalty = "Manual", pen.value = 0.001,
test.stat = "CUSUM", param.estimates = FALSE))
CPs2 <- suppressWarnings(cpt.mean(set, method = "BinSeg",
Q = length(set)/2, penalty = "Manual", pen.value = 0.001,
test.stat = "CUSUM", param.estimates = FALSE))
N1 <- seq(1, length(rise))
N2 <- seq(1, length(set))
tab1 <- merge(data.frame(N = N1, prob = NA), data.frame(N = cpts.full(CPs1)[nrow(cpts.full(CPs1)),],
prob = pen.value.full(CPs1)/2), by.x = "N", by.y = "N", all.x = T)[, -2]
tab1[is.na(tab1[, 2]), 2] <- 0
tab1[tw$fixed[tw$type==1],2] <- NA
tab2 <- merge(data.frame(N = N2, prob = NA), data.frame(N = cpts.full(CPs2)[nrow(cpts.full(CPs2)),],
prob = pen.value.full(CPs2)/2), by.x = "N", by.y = "N",all.x = T)[, -2]
tab2[is.na(tab2[, 2]), 2] <- 0
tab2[tw$fixed[tw$type==2],2] <- NA
if (is.na(rise.prob) & is.na(set.prob)) {
rise.prob <- as.numeric(round(as.numeric(quantile(tab1[tab1[,
2] != 0, 2], probs = quantile, na.rm = TRUE)), digits = 5))
set.prob <- as.numeric(round(as.numeric(quantile(tab2[tab2[,
2] != 0, 2], probs = quantile, na.rm = TRUE)), digits = 5))
}
riseProb <- data.frame(time = tw[tw[, 2] == 1, 1], prob = tab1[,2])
setProb  <- data.frame(time = tw[tw[, 2] == 2, 1], prob = tab2[,2])
tmp02   <- data.frame(tab, rise.prob = apply(cbind(as.numeric(tab[,1]), as.numeric(tab[,2]), tab$type), 1,
function(x) ifelse(x[3]==1, riseProb$prob[which.min(abs(x[1]-as.numeric(riseProb$time)))],
riseProb$prob[which.min(abs(x[2]-as.numeric(riseProb$time)))])),
set.prob = apply(cbind(as.numeric(tab[,1]), as.numeric(tab[,2]), tab$type), 1,
function(x) ifelse(x[3]==2, setProb$prob[which.min(abs(x[1]-as.numeric(setProb$time)))],
setProb$prob[which.min(abs(x[2]-as.numeric(setProb$time)))])))
tmp02$cut   <- ifelse(apply(tmp02[, c("rise.prob", "set.prob", "type")], 1, function(x) any(ifelse(x[3]==1, x[1]>=rise.prob, x[2]>=set.prob), ifelse(x[3]==1, x[2]>=set.prob, x[1]>=rise.prob))), NA, TRUE)
tmp02$fixed <- apply(fixed, 1, function(x) any(x))
tmp02 <- cbind(tmp02, NA)
s <- 1
for (i in 1:nrow(tmp02)) {
if(i<nrow(tmp02)) if(tmp02$fixed[i+1] & !tmp02$fixed[i]) tmp02$cut[i] <- NA
if(i>1) if(tmp02$fixed[i-1] & !tmp02$fixed[i]) tmp02$cut[i] <- NA
if(tmp02[i, 'fixed']) {
if(i>1) if(is.na(tmp02$cut[i-1]) & !tmp02$fixed[i-1]) s <- s+1
tmp02[i, 8] <- s} else {
if(i%in%c(2:(nrow(tmp02)-1))){
if(is.na(tmp02[i - 1, 'cut']) & !is.na(tmp02[i, 'cut'])) {
s <- s + 1
tmp02[i, 8] <- s
}
if (!is.na(tmp02[i - 1, 'cut']) & !is.na(tmp02[i, 'cut']))
tmp02[i, 8] <- s
}
}
}
ind01 <- aggregate(as.numeric(tmp02[!is.na(tmp02[,8]) & !tmp02$fixed,1]), by = list(tmp02[!is.na(tmp02[,8]) & !tmp02$fixed, 8]),
FUN =  function(x) (x[length(x)] - x[1])/60/60/24 > days)
tmp02[, 8] <- ifelse(tmp02[, 8]%in%c(ind01[ind01[,2],1], unique(tmp02[tmp02$fixed, 8])), tmp02[, 8], NA)
s <- 1
for (i in unique(tmp02[!is.na(tmp02[,8]),8])) {
tmp02[!is.na(tmp02[, 8]) & tmp02[, 8] == i, 8] <- s
s <- s + 1
}
t02 <- schedule(tmp02$tFirst, tmp02$tSecond, tmp02[,8])
arr <- tmp02[!is.na(tmp02[, 8]) & !duplicated(tmp02[, 8]),]
dep <- tmp02[!is.na(tmp02[, 8]) & !duplicated(tmp02[, 8], fromLast = T), ]
t02$P.start <- ifelse(arr$type==1, arr$rise.prob, arr$set.prob)
t02$P.end <- ifelse(dep$type==1, dep$rise.prob, dep$set.prob)
t02$Days <- apply(t02, 1, function(x) round(as.numeric(difftime(x[3], x[2], units = "days")), 1))
ds <- t02
out <- list(riseProb = tab1[, 2], setProb = tab2[, 2], rise.prob = rise.prob,
set.prob = set.prob, site = ifelse(is.na(tmp02[,8]), 0 , tmp02[,8]), migTable = ds)
if (plot) {
if (ggplot) {
# needed for poc_plots and sunset/sunrise, also for all xlab labels and breaks
tw_rise <- data.frame(sr, rise)
tw_set <- data.frame(ss, set)
# Old part of code necessary for histogram + rectangles
mig <- out$site
mig[mig > 0] <- 1
min.r <- aggregate(as.numeric(tab$tFirst[out$site>0]),
by = list(out$site[out$site>0]),
FUN = function(x) min(x))
max.r <- aggregate(as.numeric(tab$tFirst[out$site>0]),
by = list(out$site[out$site>0]),
FUN = function(x) max(x))
# New part of code necessary for histogram + rectangles
min.r[, 2] <- as.POSIXct(min.r[, 2],
origin = "1970-01-01",
tz = "UTC")
max.r[, 2] <- as.POSIXct(max.r[, 2],
origin = "1970-01-01",
tz = "UTC")
# Histogroam without rectangles
histogram <-  ggplot() +
geom_line(aes(x = tab[, 1] + (tab[, 2] - tab[, 1])/2,
y = ifelse(out$site > 0, 1, 0))) +
scale_y_continuous(limits = c(0, 1.5))
# Add rectangles to histogram
hist_rect <- histogram +
geom_rect(aes(xmin = min.r[, 2],
xmax = max.r[, 2],
ymin = 1.1,
ymax = 1.4),
fill = "grey30",
color = "transparent",
size = 0) +
geom_rect(
aes(xmin = min.r[, 2],
xmax = max.r[, 2],
ymin = 1.1,
ymax = 1.4),
fill = ifelse(unique(out$site[out$site > 0]) %in% unique(tmp02[tmp02$fixed, 8]), "red", "transparent"),
color = "transparent",
size = 0,
alpha = 0.5
) +
theme_bw() +
labs(x = "",
y = "") +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
# sunrise sunset plot
axis_increase <- 7 #increase two have sunrise and sunset on equal height in plot
rise_set <- ggplot() +
geom_line(data = tw_rise,
aes(x = sr,
y = rise),
size = 2,
color = "firebrick",
lwd = 0.5) +
geom_line(data = tw_set,
aes(x = ss,
y = set + axis_increase),
color = "cornflowerblue",
size = 2,
lwd = 0.5) +
scale_y_continuous(name = "Sunrise (red)",
sec.axis = sec_axis(~.-axis_increase,
name="Sunset (blue)")) +
scale_x_datetime(name = "",
breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y") +
theme_bw() +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_blank(),
axis.text.x = element_blank())
poc_red <- ggplot() +
geom_bar(aes(x = sr,
y = tab1[, 2]),
stat = "identity",
color = "firebrick") +
labs(x = "",
subtitle = "Sunrise",
y = "Probabilty of change") +
theme_bw() +
theme (panel.background = element_rect(fill = "white"),
axis.text.x = element_blank(),
panel.grid = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
if (is.numeric(rise.prob)) {
poc_red +
geom_hline(yintercept = rise.prob,
lty = 2,
lwd = 1.5)
}
poc_blue <- ggplot()+
geom_bar(aes(x = ss,
y = tab2[, 2]),
stat = "identity",
color = "cornflowerblue") +
labs(x = "Time",
subtitle = "Sunset",
y = "Probabilty of change") +
theme_bw() +
theme (panel.background = element_rect(fill = "white"),
panel.grid = element_blank()) +
scale_x_datetime(breaks = seq(min(sr),
max(sr),
length.out = 10),
date_labels = "%b %y")
if (is.numeric(set.prob))
poc_blue +
geom_hline(yintercept = set.prob, lty = 2, lwd = 1.5)
#print( hist_rect / (rise_set) / (poc_red) / (poc_blue)) # use of patchwork syntax to show all plots below each other
print(wrap_plots(hist_rect / (rise_set) / (poc_red) / (poc_blue)))
} else {
def.par <- par(no.readonly = TRUE)
nf <- layout(matrix(c(4, 1, 2, 3), nrow = 4, byrow = T),
heights = c(0.5, 1, 0.5, 0.5))
par(mar = c(2, 4.5, 2, 5), cex.lab = 1.5, cex.axis = 1.5,
bty = "o")
rise[tw$fixed[tw$type==1]] <- NA
plot(sr, rise,
type = "o", cex = 0.2, col = "firebrick",
ylab = "Sunrise (red)", xlim = range(sr), xaxt = "n")
par(new = T)
set[tw$fixed[tw$type==2]] <- NA
plot(ss, set, type = "o", cex = 0.2, col = "cornflowerblue",
xaxt = "n", yaxt = "n", xlab = "", ylab = "", xlim = range(ss))
axis(4)
mtext("Sunset (blue)", 4, line = 2.7, cex = 1)
axis(1, at = seq(min(ss), max(ss), by = (10 * 24 * 60 *
60)), labels = F)
axis(1, at = seq(min(ss), max(ss), by = (30 * 24 * 60 *
60)), lwd.ticks = 2, labels = trunc(seq(min(ss),
max(ss), by = (30 * 24 * 60 * 60)), "days"), cex.axis = 1)
par(mar = c(1.5, 4.5, 0.8, 5), bty = "n")
plot(sr, tab1[, 2], type = "h", lwd = 4, col = "firebrick",
ylab = "", xaxt = "n", xlim = range(sr), ylim = c(0,
max(na.omit(c(tab1[, 2], tab2[, 2])))))
if (is.numeric(rise.prob))
abline(h = rise.prob, lty = 2, lwd = 1.5)
opar <- par(mar = c(1.5, 4.5, 0.8, 5), bty = "n")
plot(ss, tab2[, 2], type = "h", lwd = 4, col = "cornflowerblue",
ylab = "", xaxt = "n", xlim = range(ss), ylim = c(0,
max(na.omit(c(tab1[, 2], tab2[, 2])))))
if (is.numeric(set.prob))
abline(h = set.prob, lty = 2, lwd = 1.5)
mtext("Probability of change", side = 2, at = max(na.omit(c(tab1[,
2], tab2[, 2]))), line = 3)
par(mar = c(1, 4.5, 1, 5), bty = "o")
mig <- out$site
mig[mig > 0] <- 1
plot(tab[, 1] + (tab[, 2] - tab[, 1])/2, ifelse(out$site >
0, 1, 0), type = "l", yaxt = "n", ylab = NA, ylim = c(0,1.5))
min.r <- aggregate(as.numeric(tab$tFirst[out$site>0]), by = list(out$site[out$site>0]), FUN = function(x) min(x))
max.r <- aggregate(as.numeric(tab$tFirst[out$site>0]), by = list(out$site[out$site>0]), FUN = function(x) max(x))
rect(min.r[,2], 1.1, max.r[,2], 1.4, col = "grey90", lwd = 0)
rect(min.r[,2], 1.1, max.r[,2], 1.4, col = ifelse(unique(out$site[out$site>0])%in%unique(tmp02[tmp02$fixed, 8]), "red", "transparent"),
density = 60)
par(def.par)
}
}
if (summary) {
i.sum.Cl(out)
}
return(out)
}
cL <- changeLight(twl$tFirst, twl$tSecond, type = twl$type, quantile=0.95, summary = F, days = 2)
check()
check()
library(devtools)
check()
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
tripMap(crds, xlim = c(-20,20), ylim = c(0,60), main="hoopoe2")
> crds <- coord(hoopoe2, degElevation = -6)
> data(hoopoe2)
> hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
> hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
> crds <- coord(hoopoe2, degElevation = -6)
tripMap(crds, xlim = c(-20,20), ylim = c(0,60), main="hoopoe2")
data(hoopoe2)
hoopoe2$tFirst <- as.POSIXct(hoopoe2$tFirst, tz = "GMT")
hoopoe2$tSecond <- as.POSIXct(hoopoe2$tSecond, tz = "GMT")
crds <- coord(hoopoe2, degElevation = -6)
tripMap(crds, xlim = c(-20,20), ylim = c(0,60), main="hoopoe2")
library(devtools)
check()
check()
check()
devtools::check()
library(devtools)
check()
check()
check()
check()
check()
df_point
# adds crosses
pointPlot <- basePlot +
#geom_sf(data = points_sf, aes(color = as.factor(group)))
geom_point(data = points_sf,
aes(geometry = 'geometry'),
stat = "sf_coordinates",
shape = ifelse(sum(names(args)%in%"pch")==1, args$pch, 3),
size = ifelse(sum(names(args)%in%"cex")==1, args$cex, 1.5))  #this version has more capabilities of changing colors, shapes etc.
check()
check()
check()
check()
check()
document()
document()
?mutate
? %>%
?%>%
document()
check()
?as_tibble
check()
check()
check()
check()
check()
check()
