x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
quantile(z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=98.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=99,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=96,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=98.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=98.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
sr.col <- "#FF7F00"
ss.col <- "#377EB8"
mn.col <- "firebrick1"
ci.col <- "dodgerblue1"
asm.col <- "grey70"
trk.col <- "steelblue"
map1.col <- "honeydew3"
map2.col <- "honeydew4"
grp.pal <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=98,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=98,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
sr.col <- "#FF7F00"
ss.col <- "#377EB8"
mn.col <- "firebrick1"
ci.col <- "dodgerblue1"
asm.col <- "grey70"
trk.col <- "steelblue"
map1.col <- "honeydew3"
map2.col <- "honeydew4"
grp.pal <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
save(fit, file = paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_fit.RData", sep=""))
sr.col <- "#FF7F00"
ss.col <- "#377EB8"
mn.col <- "firebrick1"
ci.col <- "dodgerblue1"
asm.col <- "grey70"
trk.col <- "steelblue"
map1.col <- "honeydew3"
map2.col <- "honeydew4"
grp.pal <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
zm <- locationSummary(fit$z,time=fit$model$time,collapse=T)
twl.back <- data.frame(Twilight=twilight(fit$model$time[-length(fit$model$time)],
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lon.50%'),
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lat.50%'),
fit$model$rise[-length(fit$model$time)],zenith=zenith0,iters=5),
Rise=fit$model$rise[-length(fit$model$time)])
## remove NA
ind0 <- which(is.na(twl.back$Twilight))
zenithS=zenith0
repeat{
zenithS <- zenithS+1
twl.back$Twilight[ind0] <- twilight(fit$model$time[ind0], zm$'Lon.50%'[ind0], zm$'Lat.50%'[ind0], fit$model$rise[ind0], zenith=zenithS, iters=5)
if(all(!is.na(twl.back$Twilight[ind0]))) break
}
twl.back$breed <- ifelse(twl.back$Twilight>=min(twl$Twilight[twl$Marker==2]) & twl.back$Twilight<=max(twl$Twilight[twl$Marker==2]), TRUE, FALSE)
lightImage(d.lux,offset=offset,zlim=c(0,12))
tsimagePoints(twl.back$Twilight,offset=offset,pch=16,cex=0.8,
col=ifelse(twl.back$Rise,"dodgerblue","firebrick"))
twl.gl <- data.frame(tFirst=twl.back[-nrow(twl.back),1],
tSecond=twl.back[-1,1],
type=ifelse(twl.back[,2],1,2)[-nrow(twl.back)])
tmp01 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
tmp02 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
fixed[c(1:1, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:1, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:1, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:1, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:4, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:4, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=cL$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
mS <- mergeSites(twl = twl.gl, site = cL$site, degElevation = 90-zenith0, distThreshold = 350,
fixed = fixed)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=mS$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
#write.csv(data.frame(path$time, x0), paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_path.csv", sep=""), row.names = FALSE)
#------------------------------------------------------------------------#
#--  SECTION 4: Mask                                                   --#
#------------------------------------------------------------------------#
## defining the boundaries
xlim = c(95, 179)
ylim = c(-47, 85)
source("N:/Geolocation/Mask/ProbMask.R")
#------------------------------------------------------------------------#
#--  SECTION 5: Model parameter                                        --#
#------------------------------------------------------------------------#
beta = c(0.7, 0.05)
# plot(0:80, dgamma(0:80, beta[1], beta[2]), type = "l", col="red")
alpha =  c(2.1, 0.9)
#------------------------------------------------------------------------#
#--  SECTION 5: Estelle simulation                                     --#
#------------------------------------------------------------------------#
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97.25,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97.25,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
sr.col <- "#FF7F00"
ss.col <- "#377EB8"
mn.col <- "firebrick1"
ci.col <- "dodgerblue1"
asm.col <- "grey70"
trk.col <- "steelblue"
map1.col <- "honeydew3"
map2.col <- "honeydew4"
grp.pal <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
zm <- locationSummary(fit$z,time=fit$model$time,collapse=T)
twl.back <- data.frame(Twilight=twilight(fit$model$time[-length(fit$model$time)],
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lon.50%'),
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lat.50%'),
fit$model$rise[-length(fit$model$time)],zenith=zenith0,iters=5),
Rise=fit$model$rise[-length(fit$model$time)])
## remove NA
ind0 <- which(is.na(twl.back$Twilight))
zenithS=zenith0
repeat{
zenithS <- zenithS+1
twl.back$Twilight[ind0] <- twilight(fit$model$time[ind0], zm$'Lon.50%'[ind0], zm$'Lat.50%'[ind0], fit$model$rise[ind0], zenith=zenithS, iters=5)
if(all(!is.na(twl.back$Twilight[ind0]))) break
}
twl.back$breed <- ifelse(twl.back$Twilight>=min(twl$Twilight[twl$Marker==2]) & twl.back$Twilight<=max(twl$Twilight[twl$Marker==2]), TRUE, FALSE)
lightImage(d.lux,offset=offset,zlim=c(0,12))
tsimagePoints(twl.back$Twilight,offset=offset,pch=16,cex=0.8,
col=ifelse(twl.back$Rise,"dodgerblue","firebrick"))
twl.gl <- data.frame(tFirst=twl.back[-nrow(twl.back),1],
tSecond=twl.back[-1,1],
type=ifelse(twl.back[,2],1,2)[-nrow(twl.back)])
tmp01 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
tmp02 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=cL$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
mS <- mergeSites(twl = twl.gl, site = cL$site, degElevation = 90-zenith0, distThreshold = 350,
fixed = fixed)
save(fit, file = paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_fit.RData", sep=""))
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=mS$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
zm <- locationSummary(fit$z,time=fit$model$time,collapse=T)
zm$site <- c(mS$site,NA)
write.csv(zm, paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_summary.csv", sep=""), row.names = F)
## Schedule
tm <- as.POSIXct(apply(cbind(zm[,1], zm[,2]), 1 , mean), tz="GMT", origin="1970-01-01")
site <- zm$site
arr <- tm[which(!is.na(site) & !duplicated(site) & site>0)]
dep <- tm[which(!is.na(site) & !duplicated(site, fromLast = T) & site>0)]
out <- data.frame(Site =  letters[1:length(arr)], Arrival = arr, Departure = dep)
if(!is.na(site[1])) out$Arrival[1] <- NA
if(!is.na(site[length(tm)])) out$Departure[nrow(out)] <- NA
out$Days <- round(apply(out, 1, function(x) as.numeric(difftime(x[3], x[2], units = "days"))),2)
out$Lon <- round(aggregate(zm[site>0, c("Lon.50%", "Lat.50%")], by = list(site[site>0]), median)[,2],1)
out$Lat <- round(aggregate(zm[site>0, c("Lon.50%", "Lat.50%")], by = list(site[site>0]), median)[,3],1)
tmp2      <- data.frame(Site = paste0("mig", 1:(nrow(out)-1)), Arrival = out$Departure[-nrow(out)],
Departure = out$Arrival[-1], Days = NA, Lon = NA, Lat = NA)
tmp2$Days <- round(apply(tmp2, 1, function(x) as.numeric(difftime(x[3], x[2], units = "days"))),2)
out <- rbind(out, tmp2)
out <- out[order(out[,3]),]
require(geosphere)
out$Distance <- NA
for(k in 1:nrow(out)) {
if(is.na(out$Lat[k])){
out$Distance[k] <- round(distVincentySphere(c(out$Lon[k-1], out$Lat[k-1]),
c(out$Lon[k+1], out$Lat[k+1]))/1000,1)
}
}
out$Site <- as.character(out$Site)
out$Site[which(as.character(out$Site)==letters[as.numeric(names(table(zm$site[which(twl$Marker[-nrow(twl)]==2)])))[
which.max(table(zm$site[which(twl$Marker[-nrow(twl)]==2)]))]])] <- "breed"
write.csv(out, paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_schedule.csv", sep=""), row.names = F)
