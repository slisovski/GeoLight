{
    "contents" : "#########################################################\n#  Purpose: Geolocator Analysis ID D143                 #\n#  Project ID:  Great Knot                              #\n#  Date: 21/07/2015                                     #\n#  Author: Simeon Lisovski                              #\n#########################################################\n\n\n## --- global variables ---#\nlibrary(GeoLight)\nlibrary(BAStag)\nlibrary(SGAT)\n\nlibrary(maptools)\ndata(wrld_simpl)\n\nlibrary(MASS)\n\nlibrary(bbmle)\n\nsource(\"N:/Geolocation/R_Functions/BreedSite.R\")\n\nwd <- \"D:/Dropbox/Science/Projects/GreatKnot\"\n\n\n## --- tag metadata ---#\nID <- \"D143\"\n\nlon.calib <- 122.29 # Broome\nlat.calib <- -17.96\n\n\n\n#------------------------------------------------------------------------#\n#--  SECTION 1: Estimating Twilight                                    --# \n#------------------------------------------------------------------------#\n\n## Data Import\nd.lux <-  read.table(paste(wd, \"/RawData/\", ID, \".lux\", sep=\"\"), header = FALSE, skip = 25, \n                     col.names = c(\"Date\",\"Time\", \"Light\"), \n                     colClasses = c(\"character\", \"character\", \"numeric\"))\nd.lux$Date <- as.POSIXct(strptime(paste(d.lux$Date, d.lux$Time), \"%d/%m/%Y %H:%M:%S\", tz = \"GMT\"))\nd.lux$Light <- log(d.lux$Light)\n\noffset <- 3\nlightImage(d.lux, offset = offset, zlim = c(0, 12))\n\n\n## Ploting the twilight curves for the calibration site\ntm <- seq(d.lux[1,1], d.lux[nrow(d.lux),1], by = \"day\")\nrise <- rep(c(TRUE, FALSE), length(tm))\n\nc.dat <- data.frame(Twilight = twilight(rep(tm, each = 2), lon = lon.calib, lat = lat.calib, \n                                        rise = rise, zenith = 96), Rise = rise)\n\n  ## correct for time shift\n  d.lux$Date <- d.lux$Date + seq(0, 20*60, length = nrow(d.lux))\n\nlightImage(d.lux, offset = offset, zlim = c(0, 12))\n\ntsimagePoints(c.dat$Twilight, offset = offset, pch = 16, cex = 0.5,\n               col = ifelse(c.dat$Rise, \"dodgerblue\", \"firebrick\"))\n\n\n\n## Tracking period (only to be applied at the final run)\n# d.track.tm <- as.POSIXct(locator(n = 2)$x, origin = \"1970-01-01\", tz = \"GMT\")\nd.track.tm <- as.POSIXct(c(\"2013-04-02\", \"2013-09-03\"), tz = \"GMT\")\nabline(v = d.track.tm, col = \"green\")\n\n## Calibration period\n# d.calib.tm  <- as.POSIXct(locator(n = 2)$x, origin = \"1970-01-01\", tz = \"GMT\")\n# d.calib.tm2 <- as.POSIXct(locator(n = 2)$x, origin = \"1970-01-01\", tz = \"GMT\")\nd.calib.tm <- as.POSIXct(c(\"2013-03-03\", \"2013-04-01\"), tz = \"GMT\")\n# d.calib.tm2 <- as.POSIXct(c(\"2013-03-01\", \"2013-04-20\"), tz = \"GMT\")\nd.calib <- subset(d.lux, (Date>=d.calib.tm[1] & Date<=d.calib.tm[2]))\n\n\n## Breeding period\n# d.breed.tm <- as.POSIXct(locator(n = 2)$x, origin = \"1970-01-01\", tz = \"GMT\")\nd.breed.tm <- as.POSIXct(c(\"2013-05-18\", \"2013-07-22\"), tz = \"GMT\")\nabline(v = d.breed.tm)\nd.breed <- subset(d.lux, Date>=(d.breed.tm[1]+(2*24*60*60)) & Date<=(d.breed.tm[2]-(2*24*60*60)))\n\n\n## Processing light\nthreshold <- 0.8\n# twl <- preprocessLight(d.lux, threshold, offset = offset, lmax = 12)\n\n# write.csv(twl, paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_twl.csv\", sep=\"\"), row.names = FALSE)\n\ntwl <- read.csv(paste(wd, \"/Results/\", ID, \"/\", ID, \"_twl.csv\", sep=\"\"))\ntwl[,1] <- as.POSIXct(twl[,1], tz = \"GMT\")\ntwl[,6] <- as.POSIXct(twl[,6], tz = \"GMT\")\ntwl <- twilightAdjust(twl, 300)\n\n\n## on last run\n# twl <- subset(twl, Twilight>=(d.track.tm[1]-(4*24*60*60)) & Twilight<=(d.track.tm[2]+(4*24*60*60)))\n\n\n## Visualize the estimated twiligh times\nlightImage(d.lux, offset = offset, zlim = c(0, 12))\ntsimagePoints(twl$Twilight, offset = offset, pch = 16, \n               col = ifelse(twl$Rise, \"dodgerblue\", \"firebrick\"))\n\n\n#------------------------------------------------------------------------#\n#--  SECTION 2: Simple threshold estimates (initial path)              --# \n#------------------------------------------------------------------------#\n\n### get zenith anfle and alpha parameters\ntwl_calib <- subset(twl, (Twilight>=d.calib.tm[1] & Twilight<=d.calib.tm[2]))\n\nsun  <- solar(twl_calib[,1])\nz    <- refracted(zenith(sun, lon.calib, lat.calib))\n\ntwl_t   <- twilight(twl_calib[,1], lon.calib, lat.calib, rise = twl_calib[,2], zenith = max(z)+0.1)\ntwl_dev <- ifelse(twl_calib$Rise, as.numeric(difftime(twl_calib[,1], twl_t, units = \"mins\")),\n                  as.numeric(difftime(twl_t, twl_calib[,1], units = \"mins\")))\n\nhist(twl_dev, freq = F)\nseq <- seq(0, 80, length = 100)\nfitml_ng <- fitdistr(twl_dev, \"log-Normal\")\nlines(seq, dlnorm(seq, fitml_ng$estimate[1], fitml_ng$estimate[2]), col = \"firebrick\", lwd = 3, lty = 2)\n\n\nthresholdCalibrate(d.calib, lon.calib, lat.calib, xlim = c(90, 102), \n                    ylim = c(0, 6), pch = 16, cex = 0.5, type = \"o\")\nabline(h = threshold, v = median(z), lty = 2)\nabline(v = quantile(z, prob = c(0.8, 0.9, 0.95, 0.99)), col = \"blue\", lty = 3)\nquantile(z, prob = c(0.8, 0.9, 0.95, 0.99))\n\n\n\nzenith0 <- median(z)\ntol <- 0.1\n\n\npath <- thresholdPath(twl$Twilight, twl$Rise, zenith = 97.75, tol = tol)\n\n\nopar <- par(mfrow = c(2, 1), mar = c(2,4,1,1)+0.1)\nplot(path$time, path$x[, 1], type = \"b\", pch = 16, cex = 0.5, ylab = \"Lon\", xlab = '')\nabline(h = lon.calib)\nplot(path$time, path$x[, 2], type = \"b\", pch = 16, cex = 0.5, ylab = \"Lat\", xlab = '')\nabline(h = lat.calib)\npar(opar)\n\n\nplot(path$x, type = \"n\")\nplot(wrld_simpl, add = T, col = \"grey95\")\nbox()\nlines(path$x, col = \"blue\")\npoints(path$x, pch = 16, cex = 0.5, col = \"blue\")\n\n\n#------------------------------------------------------------------------#\n#--  SECTION 3: Breeding Site Estimation                               --# \n#------------------------------------------------------------------------#\n\ncalib <- calibration(d.calib$Date, d.calib$Light, c(lon.calib, lat.calib), max.light = 5, aggr = 1.5)\ncalib[calib[,1]<50,2] <- max(calib$light)\ncalib[calib[,1]>102,2] <- min(calib$light)\n\nprob.matrix <- estim.lat(d.breed$Date, d.breed$Light, calib,\n                         lonlim = c(100, 160), latlim = c(55, 75))\n\nbreeding.site <- c(128.51, 65.70)\n\npdf(file = paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_breedingSite.pdf\", sep=\"\"))\nopar <- par(mar = c(6, 4, 1, 1), cex.lab = 1.5, cex.axis = 1.3)\nimage(prob.matrix$lon, prob.matrix$lat, prob.matrix$p,\n      breaks = c(0, seq(0.99, 1, length = 20), 2), \n      col = c(\"transparent\", rev(heat.colors(20))[-20], \"red\"),\n      ylab = \"Latitude\", xlab = \"Longitude\")\ncontour(prob.matrix$lon, prob.matrix$lat, prob.matrix$p, \n        add=T, levels = c(0.9, 0.95, 0.99, 1), labcex = 1)\nplot(wrld_simpl, add = T)\nbox()\n\npoints(breeding.site[1], breeding.site[2], pch = \"*\", col = \"black\", cex = 3)  \npar(opar)\ndev.off()\n\n\n## Incoorporate breeding site into twl\nbreed.twl <- data.frame(Twilight = seq(twl[which.max(diff(twl[,1])),1]+24*60*60, \n                                       twl[(which.max(diff(twl[,1]))+1),1]-24*60*60, by = 12*60*60),\n                        Rise = c(!twl[which.max(diff(twl[,1])),2], twl[which.max(diff(twl[,1])),2]),\n                        Deleted = FALSE, Marker = 2, Inserted = FALSE,\n                        Twilight3 = seq(twl[which.max(diff(twl[,1])),1]+24*60*60, \n                                        twl[(which.max(diff(twl[,1]))+1),1]-24*60*60, by = 12*60*60),\n                        Marker3 = 0)\ntwl <- rbind(twl, breed.twl)\ntwl <- twl[order(twl[,1]),]\n\n## Update initial path\npath <- thresholdPath(twl$Twilight, twl$Rise, zenith = 97.75, tol = tol)\n#write.csv(data.frame(path$time, path$x), paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_path.csv\", sep=\"\"), row.names = FALSE)\n\nx0 <- path$x\n\n## Adjust breeding site location and first few and last locations\n## Marker==1 for first 1 and last 1 positions\ntwl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1\n\nx0[twl$Marker==1,1] <- lon.calib\nx0[twl$Marker==1,2] <- lat.calib\n\nx0[1:4,1] <- 121.11\nx0[1:4,2] <- -19.58\n\nx0[twl$Marker==2,1] <- breeding.site[1]\nx0[twl$Marker==2,2] <- breeding.site[2]\n\nfixedx <- twl$Marker!=0\n\n## Intermediate track\nz0 <- trackMidpts(x0)\n\n\n\n#------------------------------------------------------------------------#\n#--  SECTION 4: Mask                                                   --# \n#------------------------------------------------------------------------#\n\n## defining the boundaries\nxlim = c(95, 179)\nylim = c(-47, 85)\n\nsource(\"N:/Geolocation/Mask/ProbMask.R\")\n\n\n#------------------------------------------------------------------------#\n#--  SECTION 5: Model parameter                                        --# \n#------------------------------------------------------------------------#\n\nbeta = c(0.7, 0.05)\nplot(0:80, dgamma(0:80, beta[1], beta[2]), type = \"l\", col=\"red\")\n\nalpha =  c(fitml_ng$estimate[1], fitml_ng$estimate[2])\n\n#------------------------------------------------------------------------#\n#--  SECTION 5: Estelle simulation                                     --# \n#------------------------------------------------------------------------#\n\n\nmodel <- thresholdModel(twl$Twilight,twl$Rise,\n                        twilight.model=\"ModifiedLogNormal\",\n                        alpha=alpha,beta=beta,\n                        x0=x0,z0=z0,zenith=quantile(z, prob = 0.95),fixedx=fixedx)\n\nproposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))\nproposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))\n\nfit <- estelleMetropolis(model,proposal.x,proposal.z,iters=500,thin=20,chains=1)\n\nplot(wrld_simpl,col= \"grey90\", border=\"grey10\", xlim = range(x0[,1]), ylim = range(x0[,2]))\nxm <- locationMean(fit$x)\nlines(xm,col=rgb(t(col2rgb(\"cornflowerblue\"))/255,alpha=0.9))\npoints(xm,pch=16,cex=0.8,col=rgb(t(col2rgb(\"cornflowerblue\"))/255,alpha=0.5))\nbox()\n\n\nx0 <- chainLast(fit$x)\nz0 <- chainLast(fit$z)\n\nmodel <- thresholdModel(twl$Twilight,twl$Rise,\n                        twilight.model=\"LogNormal\",\n                        alpha=alpha,beta=beta,\n                        logp.x=log.prior,logp.z=log.prior,\n                        x0=x0,z0=z0,zenith=quantile(z, prob = 0.95),fixedx=fixedx)\nproposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))\nproposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))\n\n\nfit <- estelleMetropolis(model,proposal.x,proposal.z,\n                         iters=300,thin=20,chains=2)\nfor(k in 1:3) {\n  proposal.x <- mvnorm(chainCov(fit$x),s=0.2)\n  proposal.z <- mvnorm(chainCov(fit$z),s=0.2)\n  fit <- estelleMetropolis(model,proposal.x,proposal.z,\n                           x0=chainLast(fit$x),\n                           z0=chainLast(fit$z),\n                           iters=300,thin=20,chains=2)\n}\n\n\nproposal.x <- mvnorm(chainCov(fit$x),s=0.25)\nproposal.z <- mvnorm(chainCov(fit$z),s=0.25)\nfit <- estelleMetropolis(model,proposal.x,proposal.z,\n                         x0=chainLast(fit$x),\n                         z0=chainLast(fit$z),\n                         iters=2000,thin=20,chains=2)\n\n\n# save(fit, file = paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_fit.RData\", sep=\"\"))\nload(paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_fit.RData\", sep=\"\"))\n\n#------------------------------------------------------------------------#\n#--  SECTION 8: Dignostics                                             --# \n#------------------------------------------------------------------------#\n\nsr.col <- \"#FF7F00\"\nss.col <- \"#377EB8\"\nmn.col <- \"firebrick1\"\nci.col <- \"dodgerblue1\"\nasm.col <- \"grey70\"\ntrk.col <- \"steelblue\"\nmap1.col <- \"honeydew3\"\nmap2.col <- \"honeydew4\"\ngrp.pal <- c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\")\n\n\ns <- locationSummary(fit$x,time=model$time,collapse=F)\n\n\nplot(wrld_simpl,xlim=xlim,ylim=ylim,col = \"grey90\",border = \"grey10\")\nplot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = \"grey90\",border = \"grey10\")\n\nfor(k in 1:length(s)) {\n  lines(s[[k]][,\"Lon.mean\"],s[[k]][,\"Lat.mean\"],\n        col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))\n}\nbox()\n\n\nfixedz <- fixedx[-length(fixedx)] > 0 & fixedx[-length(fixedx)]==fixedx[-1]\ndt <- ifelse(fixedz,0,model$dt)\nim <- locationImage(fit$z,xlim=xlim,ylim=ylim,nx=4*diff(xlim),ny=4*diff(ylim),\n                    weight=dt,collapse=TRUE)\n\nopar <- par(mar=c(2,2,2,2)+0.1)\nplot(wrld_simpl,col= \"grey90\",border=\"grey10\" , xlim = range(im$x), ylim = range(im$y))\nplot(elide(wrld_simpl,shift=c(360,0)),add=T,col=\"grey90\",border=\"grey10\")\nimage(im$x,im$y,im$W,xlab=\"\",ylab=\"\",cex.axis=0.7, add = T, col = topo.colors(200))\nxm <- locationMean(fit$z)\nlines(xm,col=rgb(t(col2rgb(\"firebrick\"))/255,alpha=0.5))\npoints(xm,pch=16,cex=0.5,col=rgb(t(col2rgb(\"firebrick\"))/255,alpha=0.2))\nbox()\npar(opar)\n\n\nopar <- par(mfrow=c(2,1),mar=c(4,5,2,1)+0.1)\ns <- locationSummary(fit$x,time=model$time)\nmatplot(s$Time,s[,c(\"Lon.mean\",\"Lon.2.5%\",\"Lon.97.5%\")],\n        type=\"l\",lty=1,ylab=\"Lon\",xaxt=\"n\",xlab=\"\",cex.axis=0.7,\n        col=c(mn.col,ci.col,ci.col), add = T)\naxis.POSIXct(1,at=seq(round(min(s$Time),\"day\"),\n                      round(max(s$Time),\"day\"),\"months\"),\n             format=\"%d %b\",las=2,cex.axis=0.7)\nmatplot(s$Time,s[,c(\"Lat.mean\",\"Lat.2.5%\",\"Lat.97.5%\")],\n        type=\"l\",lty=1,ylab=\"Lat\",xaxt=\"n\",xlab=\"\",cex.axis=0.7,\n        col=c(mn.col,ci.col,ci.col))\naxis.POSIXct(1,at=seq(round(min(s$Time),\"day\"),\n                      round(max(s$Time),\"day\"),\"months\"),\n             format=\"%d %b\",las=2,cex.axis=0.7)\npar(opar)\n\n#------------------------------------------------------------------------#\n#--  SECTION 8: Movement/Residency analysis                            --# \n#------------------------------------------------------------------------#\n\ns <- locationSummary(fit$z,time=model$time)\n\n## GeoLight with changeLight and mergeSites\n\ntwl.back <- data.frame(Twilight = twilight(twl$Twilight[-nrow(twl)], \n                                           s$`Lon.50%`, s$`Lat.50%`, twl$Rise[-nrow(twl)], zenith=zenith0),\n                       Rise = twl$Rise[-nrow(twl)])\n\nlightImage(d.lux,offset=offset, zlim = c(0, 12))\ntsimagePoints(twl.back$Twilight,offset=offset,pch=16,cex=0.8,\n              col=ifelse(twl.back$Rise,\"dodgerblue\",\"firebrick\"))  \n\ntwl.gl <- data.frame(tFirst = twl.back[-nrow(twl.back),1],\n                     tSecond = twl.back[-1, 1],\n                     type = ifelse(twl.back[,2], 1, 2)[-nrow(twl.back)])\n\n# tFirst\ntmp01 <- which(is.na(twl.gl$tFirst))\ntwl.gl$tFirst[tmp01] <- twilight(seq(twl.gl$tFirst[min(tmp01)-1]+12*60*60, twl.gl$tFirst[max(tmp01)+1]-12*60*60, length = length(tmp01)), \n                                 lon = s$`Lon.50%`[min(tmp01)-1], lat = s$`Lat.50%`[max(tmp01)+1], zenith = zenith0,\n                                 rise = ifelse(twl.gl$type[tmp01]==1, TRUE, FALSE), iters = 5)\n\n\n# tSecond\ntmp02 <- which(is.na(twl.gl$tSecond))\ntwl.gl$tSecond[tmp02] <- twilight(seq(twl.gl$tSecond[min(tmp02)-1]+12*60*60, twl.gl$tSecond[max(tmp02)+1]-12*60*60, length = length(tmp02)), \n                                  lon = s$`Lon.50%`[min(tmp01)-1], lat = s$`Lat.50%`[max(tmp01)+1], zenith = zenith0,\n                                  rise = ifelse(twl.gl$type[tmp02]==1, FALSE, TRUE), iters = 5) \n\nfixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)\nfixed[c(1:2, c(tmp01,229), (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE\nfixed[c(1:2, c(tmp01,229), (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE\n\ncL <- changeLight(twl = twl.gl, \n                  quantile = 0.8, fixed = fixed, days = 2, summary = T)\n\n\nsiteMap(cbind(s$`Lon.50%`, s$`Lat.50%`), site = cL$site, type = 'cross', hull = F,\n        ylim = ylim, xlim = xlim)\n# lines(cbind(s$`Lon.50%`, s$`Lat.50%`), type = \"o\")\n\nmS <- mergeSites(twl = twl.gl, site = cL$site, degElevation = 90-zenith0, distThreshold = 500, fixed = fixed)\n\nsiteMap(cbind(s$`Lon.50%`, s$`Lat.50%`), site = mS$site, type = 'cross', hull = F,\n        ylim = ylim, xlim = xlim)\n\nschedule(tFirst = twl.gl[,1], tSecond = twl.gl[,2], site = mS$site)\n\n## backtransfrom to SGAT format\ntm.gl <- .POSIXct(c(as.POSIXct(twl.gl$tFirst, \"GMT\"), as.POSIXct(twl.gl$tSecond, \"GMT\")), \"GMT\")\nkeep  <- !duplicated(tm.gl)\ntm.gl <-tm.gl[keep]\ns.sgat <- c(mS$site, mS$site)[keep]\ns.sgat  <- s.sgat[order(tm.gl)]\n\n\n### save summary!\ns$Breed <- ifelse(twl$Marker==2, TRUE, FALSE)[-nrow(twl)]\ns$Site  <- s.sgat\n\nwrite.csv(s, paste(wd, \"/AnalysisOutput/GreatKnot/\", ID, \"/\", ID, \"_summary.csv\", sep=\"\"), row.names = F)\n\n",
    "created" : 1446781620624.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1684404262",
    "id" : "14E20D3D",
    "lastKnownWriteTime" : 1445321082,
    "path" : "D:/Dropbox/Science/Projects/GreatKnot/Code/D143_done.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}