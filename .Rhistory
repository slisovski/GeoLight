diff <- as.numeric(difftime(x[, 1], t.tw, units = "mins"))
-sum(dnorm(diff, alpha[1], alpha[2], log = T), na.rm = T)
}
fit0 <- optim(cbind(median(x[, 4], na.rm = T), median(x[,5], na.rm = T)),
loglik, lower = cbind(lonlim[1], latlim[1]), upper = cbind(lonlim[2], latlim[2]),
method = "L-BFGS-B", hessian = T)
fit <- optim(cbind(fit0$par[1], fit0$par[2]), loglik,
lower = cbind(lonlim[1], latlim[1]), upper = cbind(lonlim[2],
latlim[2]), method = "L-BFGS-B", hessian = T)
fisher_info <- solve(fit$hessian)
prop_sigma <- sqrt(diag(fisher_info))
prop_sigma <- diag(prop_sigma)
lon.lower <- c(fit$par[1] - 1.96 * prop_sigma)[1]
lat.lower <- c(fit$par[2] - 1.96 * prop_sigma)[4]
lon.upper <- c(fit$par[1] + 1.96 * prop_sigma)[1]
lat.upper <- c(fit$par[2] + 1.96 * prop_sigma)[4]
matrix(c(fit$par[1], fit$par[2], lon.lower, lat.lower,
lon.upper, lat.upper), ncol = 6)
}
out <- data.frame(site = unique(site[site != 0 & !fixed.ind]), t(sapply(split(tw[site != 0 & !fixed.ind, ],
f = site[site != 0 & !fixed.ind]), mod)))
rep = TRUE
ite = 1
repeat {
for (i in site[site != 0 & !duplicated(site) & !fixed.ind]) {
if(i==max(out$site)) break
dist0 <- fields:::rdist.earth(out[which(out[,1]==i):(which(out[,1]==i) + 1), 2:3])[2, 1]
if (dist0 <= distThreshold)
break
}
if (i < max(site[site != 0 & !duplicated(site) & !fixed.ind])) {
site[(which(site == i)[1]):(which(site == (i + 1))[sum(site == (i + 1))])] <- i
site[which(site > i)] <- site[which(site > i)] - 1
} else rep = FALSE
out <- data.frame(site = unique(site[site != 0 & !fixed.ind]), t(sapply(split(tw[site != 0 & !fixed.ind, ],
f = site[site != 0 & !fixed.ind]), mod)))
if (!rep)
break
else ite <- ite + 1
}
if(any(fixed)) {
fs <- site[site != 0 & !duplicated(site) & fixed.ind]
out.temp <- as.data.frame(cbind(fs, matrix(NA, nrow = length(fs), ncol = ncol(out)-1)))
names(out.temp) <- names(out)
out <- rbind(out, out.temp)
out <- out[order(out[,1]),]
}
if (plot) {
hours0 <- as.numeric(format(tw[, 1], "%H")) + as.numeric(format(tw[,
1], "%M"))/60
crd0 <- out[match(site, out$site), 2:3]
crd0[!is.na(crd0[, 1]), ] <- crds0[!is.na(crd0[, 1]),
]
hours1 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 2], lat = out[match(site, out$site), 3])
hours1 <- as.numeric(format(hours1, "%H")) + as.numeric(format(hours1,
"%M"))/60
hours2 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 4], lat = out[match(site, out$site), 3])
hours2 <- as.numeric(format(hours2, "%H")) + as.numeric(format(hours2,
"%M"))/60
hours3 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 6], lat = out[match(site, out$site), 3])
hours3 <- as.numeric(format(hours3, "%H")) + as.numeric(format(hours3,
"%M"))/60
for (t in 1:2) {
cor <- rep(NA, 24)
for (i in 0:23) {
cor[i + 1] <- max(abs((c(hours0[tw$type == t][1],
hours0[tw$type == t]) + i)%%24 - (c(hours0[tw$type ==
t], hours0[tw$type == t][length(hours0)]) +
i)%%24), na.rm = T)
}
hours0[tw$type == t] <- (hours0[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours1[tw$type == t] <- (hours1[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours2[tw$type == t] <- (hours2[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours3[tw$type == t] <- (hours3[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
}
opar <- par(mfrow = c(5, 1), oma = c(5, 0, 0, 0), mar = c(1.5,
5, 1, 1))
mig1 <- site0
mig1[mig1 > 0] <- 1
mig2 <- site
mig2[mig2 > 0] <- 1
plot(tw[, 1], ifelse(mig2 > 0, 1, 0), type = "l", yaxt = "n",
ylab = NA, ylim = c(0, 1.5), col = "firebrick", lwd = 2,
xaxt = "n")
lines(tw[, 1], ifelse(mig1 > 0, 1, 0), type = "l", lty = 2)
rect(tw[site > 0 & !duplicated(site), 1], 1.1, tw[site > 0 & !duplicated(site, fromLast = T), 1], 1.4,
lwd = 0, col = "grey")
rect(tw[site > 0 & !duplicated(site), 1], 1.1, tw[site > 0 & !duplicated(site, fromLast = T), 1], 1.4,
col = ifelse(unique(site[site>0])%in%unique(site[fixed.ind & site>0]), "red", "transparent"),
density = 60)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[tw[, 2] == 1, 1], hours1[tw[, 2] == 1], type = "l",
lwd = 2, col = "firebrick", ylab = "Sunrise (red)",
xlim = range(tw[, 1]), ylim = range(hours0[tw[, 2] ==
1]), xaxt = "n")
lines(tw[tw[, 2] == 1, 1], hours2[tw[, 2] == 1], type = "l",
lwd = 1, lty = 2)
lines(tw[tw[, 2] == 1, 1], hours3[tw[, 2] == 1], type = "l",
lwd = 1, lty = 2)
points(tw[tw[, 2] == 1 & !tw$fixed, 1], hours0[tw[, 2] == 1 & !tw$fixed], cex = 0.5,
pch = 21, col = "black", bg = "firebrick", lwd = 0.5)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[tw[, 2] == 2, 1], hours1[tw[, 2] == 2], type = "l",
lwd = 2, col = "cornflowerblue", ylab = "Sunset (blue)",
xlim = range(tw[, 1]), ylim = range(hours0[tw[, 2] ==
2]), xaxt = "n")
lines(tw[tw[, 2] == 2, 1], hours2[tw[, 2] == 2], type = "l",
lwd = 1, lty = 2)
lines(tw[tw[, 2] == 2, 1], hours3[tw[, 2] == 2], type = "l",
lwd = 1, lty = 2)
points(tw[tw[, 2] == 2 & !tw$fixed, 1], hours0[tw[, 2] == 2 & !tw$fixed], cex = 0.5,
pch = 21, col = "black", bg = "cornflowerblue", lwd = 0.5)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[, 1], crds0[, 1], type = "o", pch = 16, cex = 0.5,
xaxt = "n", ylab = "Longitude", cex.lab = 1.7, xlab = "")
abline(v = c(tw[site0 > 0 & !duplicated(site0), 1], tw[site0 >
0 & !duplicated(site0, fromLast = T), 1]), lty = 2)
abline(v = c(tw[site > 0 & !duplicated(site), 1], tw[site >
0 & !duplicated(site, fromLast = T), 1]), lwd = 1.5,
col = "firebrick")
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[, 1], crds0[, 2], type = "o", pch = 16, cex = 0.5,
xaxt = "n", ylab = "Latitude", cex.lab = 1.7, xlab = "")
abline(v = c(tw[site0 > 0 & !duplicated(site0), 1], tw[site0 >
0 & !duplicated(site0, fromLast = T), 1]), lty = 2)
abline(v = c(tw[site > 0 & !duplicated(site), 1], tw[site >
0 & !duplicated(site, fromLast = T), 1]), lwd = 1.5,
col = "firebrick")
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = format(seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
"%d-%b"))
mtext("Date", 1, outer = T, line = 1.6, cex = 1.2)
par(opar)
}
names(out) <- c("site", "Lon", "Lat", "Lon.upper", "Lat.upper",
"Lon.lower", "Lat.lower")
list(site = site, summary = out)
}
mergeSites(twl.gl, site = cL$site, fixed = fixed, distThreshold = 800, degElevation = 90-zenith0)
mergeSites <- function (tFirst, tSecond, type, twl, site, degElevation, distThreshold = 250,
fixed = NULL, alpha = c(0, 15), plot = TRUE)
{
tab <- GeoLight:::i.argCheck(as.list(environment())[sapply(environment(),FUN = function(x) any(class(x) != "name"))])
site0 <- site
if(is.null(fixed)) fixed = matrix(FALSE, nrow = nrow(tab), ncol = 2)
tw <- data.frame(datetime = .POSIXct(c(tab$tFirst, tab$tSecond),"GMT"),
type = c(tab$type, ifelse(tab$type == 1, 2, 1)),
fixed = c(fixed[,1], fixed[,2]))
tw <- tw[!duplicated(tw$datetime), ]
tw <- tw[order(tw[, 1]), ]
tw <- tw[1:nrow(tab), ]
crds0 <- coord(tab, degElevation = degElevation, note = F)
fixed.ind <- apply(fixed, 1, function(x) any(x==TRUE))
crds0[fixed.ind] <- cbind(NA, NA)
tw$lon <- crds0[, 1]
tw$lat <- crds0[, 2]
lonlim <- range(crds0[, 1], na.rm = T)
lon.seq <- seq(lonlim[1] - 1, lonlim[2] + 1, by = 1)
latlim <- range(crds0[, 2], na.rm = T)
lat.seq <- seq(latlim[1] - 1, latlim[2] + 1, by = 1)
mod <- function(x) {
loglik <- function(crds) {
t.tw <- twilight(x[, 1], lon = crds[1], lat = crds[2],
rise = ifelse(x[, 2] == 1, TRUE, FALSE), zenith = 90 -
degElevation)
diff <- as.numeric(difftime(x[, 1], t.tw, units = "mins"))
-sum(dnorm(diff, alpha[1], alpha[2], log = T), na.rm = T)
}
fit0 <- optim(cbind(median(x[, 4], na.rm = T), median(x[,5], na.rm = T)),
loglik, lower = cbind(lonlim[1], latlim[1]), upper = cbind(lonlim[2], latlim[2]),
method = "L-BFGS-B", hessian = T)
fit <- optim(cbind(fit0$par[1], fit0$par[2]), loglik,
lower = cbind(lonlim[1], latlim[1]), upper = cbind(lonlim[2],
latlim[2]), method = "L-BFGS-B", hessian = T)
fisher_info <- solve(fit$hessian)
prop_sigma <- sqrt(diag(fisher_info))
prop_sigma <- diag(prop_sigma)
lon.lower <- c(fit$par[1] - 1.96 * prop_sigma)[1]
lat.lower <- c(fit$par[2] - 1.96 * prop_sigma)[4]
lon.upper <- c(fit$par[1] + 1.96 * prop_sigma)[1]
lat.upper <- c(fit$par[2] + 1.96 * prop_sigma)[4]
matrix(c(fit$par[1], fit$par[2], lon.lower, lat.lower,
lon.upper, lat.upper), ncol = 6)
}
out <- data.frame(site = unique(site[site != 0 & !fixed.ind]), t(sapply(split(tw[site != 0 & !fixed.ind, ],
f = site[site != 0 & !fixed.ind]), mod)))
rep = TRUE
ite = 1
repeat {
for (i in site[site != 0 & !duplicated(site) & !fixed.ind]) {
if(i==max(out$site)) break
dist0 <- fields:::rdist.earth(out[which(out[,1]==i):(which(out[,1]==i) + 1), 2:3])[2, 1]
if (dist0 <= distThreshold)
break
}
if (i < max(site[site != 0 & !duplicated(site) & !fixed.ind])) {
site[(which(site == i)[1]):(which(site == (i + 1))[sum(site == (i + 1))])] <- i
site[which(site > i)] <- site[which(site > i)] - 1
} else rep = FALSE
out <- data.frame(site = unique(site[site != 0 & !fixed.ind]), t(sapply(split(tw[site != 0 & !fixed.ind, ],
f = site[site != 0 & !fixed.ind]), mod)))
if (!rep)
break
else ite <- ite + 1
}
if(any(fixed)) {
fs <- site[site != 0 & !duplicated(site) & fixed.ind]
out.temp <- as.data.frame(cbind(fs, matrix(NA, nrow = length(fs), ncol = ncol(out)-1)))
names(out.temp) <- names(out)
out <- rbind(out, out.temp)
out <- out[order(out[,1]),]
}
if (plot) {
hours0 <- as.numeric(format(tw[, 1], "%H")) + as.numeric(format(tw[,
1], "%M"))/60
crd0 <- out[match(site, out$site), 2:3]
crd0[!is.na(crd0[, 1]), ] <- crds0[!is.na(crd0[, 1]),
]
hours1 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 2], lat = out[match(site, out$site), 3])
hours1 <- as.numeric(format(hours1, "%H")) + as.numeric(format(hours1,
"%M"))/60
hours2 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 4], lat = out[match(site, out$site), 3])
hours2 <- as.numeric(format(hours2, "%H")) + as.numeric(format(hours2,
"%M"))/60
hours3 <- twilight(tw[, 1], rise = ifelse(tw[, 2] ==
1, TRUE, FALSE), zenith = 90 - degElevation, lon = out[match(site,
out$site), 6], lat = out[match(site, out$site), 3])
hours3 <- as.numeric(format(hours3, "%H")) + as.numeric(format(hours3,
"%M"))/60
for (t in 1:2) {
cor <- rep(NA, 24)
for (i in 0:23) {
cor[i + 1] <- max(abs((c(hours0[tw$type == t][1],
hours0[tw$type == t]) + i)%%24 - (c(hours0[tw$type ==
t], hours0[tw$type == t][length(hours0)]) +
i)%%24), na.rm = T)
}
hours0[tw$type == t] <- (hours0[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours1[tw$type == t] <- (hours1[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours2[tw$type == t] <- (hours2[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
hours3[tw$type == t] <- (hours3[tw$type == t] + (which.min(round(cor,
2))) - 1)%%24
}
opar <- par(mfrow = c(5, 1), oma = c(5, 0, 0, 0), mar = c(1.5,
5, 1, 1))
mig1 <- site0
mig1[mig1 > 0] <- 1
mig2 <- site
mig2[mig2 > 0] <- 1
plot(tw[, 1], ifelse(mig2 > 0, 1, 0), type = "l", yaxt = "n",
ylab = NA, ylim = c(0, 1.5), col = "firebrick", lwd = 2,
xaxt = "n")
lines(tw[, 1], ifelse(mig1 > 0, 1, 0), type = "l", lty = 2)
rect(tw[site > 0 & !duplicated(site), 1], 1.1, tw[site > 0 & !duplicated(site, fromLast = T), 1], 1.4,
lwd = 0, col = "grey")
rect(tw[site > 0 & !duplicated(site), 1], 1.1, tw[site > 0 & !duplicated(site, fromLast = T), 1], 1.4,
col = ifelse(unique(site[site>0])%in%unique(site[fixed.ind & site>0]), "red", "transparent"),
density = 60)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[tw[, 2] == 1, 1], hours1[tw[, 2] == 1], type = "l",
lwd = 2, col = "firebrick", ylab = "Sunrise (red)",
xlim = range(tw[, 1]), ylim = range(hours0[tw[, 2] ==
1]), xaxt = "n")
lines(tw[tw[, 2] == 1, 1], hours2[tw[, 2] == 1], type = "l",
lwd = 1, lty = 2)
lines(tw[tw[, 2] == 1, 1], hours3[tw[, 2] == 1], type = "l",
lwd = 1, lty = 2)
points(tw[tw[, 2] == 1 & !tw$fixed, 1], hours0[tw[, 2] == 1 & !tw$fixed], cex = 0.5,
pch = 21, col = "black", bg = "firebrick", lwd = 0.5)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[tw[, 2] == 2, 1], hours1[tw[, 2] == 2], type = "l",
lwd = 2, col = "cornflowerblue", ylab = "Sunset (blue)",
xlim = range(tw[, 1]), ylim = range(hours0[tw[, 2] ==
2]), xaxt = "n")
lines(tw[tw[, 2] == 2, 1], hours2[tw[, 2] == 2], type = "l",
lwd = 1, lty = 2)
lines(tw[tw[, 2] == 2, 1], hours3[tw[, 2] == 2], type = "l",
lwd = 1, lty = 2)
points(tw[tw[, 2] == 2 & !tw$fixed, 1], hours0[tw[, 2] == 2 & !tw$fixed], cex = 0.5,
pch = 21, col = "black", bg = "cornflowerblue", lwd = 0.5)
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[, 1], crds0[, 1], type = "o", pch = 16, cex = 0.5,
xaxt = "n", ylab = "Longitude", cex.lab = 1.7, xlab = "")
abline(v = c(tw[site0 > 0 & !duplicated(site0), 1], tw[site0 >
0 & !duplicated(site0, fromLast = T), 1]), lty = 2)
abline(v = c(tw[site > 0 & !duplicated(site), 1], tw[site >
0 & !duplicated(site, fromLast = T), 1]), lwd = 1.5,
col = "firebrick")
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = FALSE)
plot(tw[, 1], crds0[, 2], type = "o", pch = 16, cex = 0.5,
xaxt = "n", ylab = "Latitude", cex.lab = 1.7, xlab = "")
abline(v = c(tw[site0 > 0 & !duplicated(site0), 1], tw[site0 >
0 & !duplicated(site0, fromLast = T), 1]), lty = 2)
abline(v = c(tw[site > 0 & !duplicated(site), 1], tw[site >
0 & !duplicated(site, fromLast = T), 1]), lwd = 1.5,
col = "firebrick")
axis(1, at = seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
labels = format(seq(tw[1, 1], tw[nrow(tw), 1], length = 10),
"%d-%b"))
mtext("Date", 1, outer = T, line = 1.6, cex = 1.2)
par(opar)
}
names(out) <- c("site", "Lon", "Lat", "Lon.upper", "Lat.upper",
"Lon.lower", "Lat.lower")
list(site = site, summary = out)
}
mergeSites(twl.gl, site = cL$site, fixed = fixed, distThreshold = 800, degElevation = 90-zenith0)
mergeSites(twl.gl, site = cL$site, fixed = fixed, distThreshold = 250, degElevation = 90-zenith0)
s <- locationSummary(fit$z,time=model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(c("#E41A1C", "#377EB8")[k]))/255,alpha=0.4))
}
box()
cL <- changeLight(twl.gl, quantile = 0.9, days = 2, fixed = fixed, summary = T)
mS <- mergeSites(twl.gl, site = cL$site, fixed = fixed, distThreshold = 250, degElevation = 90-zenith0)
siteMap(cbind(zm$`Lon.50%`, zm$`Lat.50%`), site = cL$site, xlim = xlim, ylim = ylim, type = 'cross', hull = F)
schedule(twl.gl[,1], twl.gl[,2], site = mS$site)
library(GeoLight)
siteMap(cbind(zm$`Lon.50%`, zm$`Lat.50%`), site = mS$site, xlim = xlim, ylim = ylim, type = 'cross', hull = F)
library(GeoLight) ## Version 2.0
library(SGAT)
library(BAStag)
library(MASS)
library(maptools)
data(wrld_simpl)
## the SGAT and BAStag package can be installed by:
## library(devtools)
## install_github("SWotherspoon/SGAT")
## install_github("SWotherspoon/BAStag")
# wd <- "C:/Users/Simeon/Desktop/Stonechat"
wd <-  "C:/Users/slisovsk/Dropbox/Science/Projects/Stonechat"
d.lux <-  read.table(paste(wd, "code and data/data/782.lux", sep="/"),
header = FALSE, skip = 25,
col.names = c("Date","Time", "Light"),
colClasses = c("character", "character", "numeric"))
d.lux$Date <- as.POSIXct(strptime(paste(d.lux$Date, d.lux$Time),
"%d/%m/%Y %H:%M:%S", tz = "GMT"))
d.lux$Light <- log(d.lux$Light)
offset <- 4
lightImage(d.lux, offset = offset, zlim = c(0, 12))
lon.calib <- 141.4
lat.calib <- 43.1
## Ploting the twilight curves for the calibration site
tm <- seq(d.lux[1,1], d.lux[nrow(d.lux),1], by = "day")
rise <- rep(c(TRUE, FALSE), length(tm))
c.dat <- data.frame(Twilight = twilight(rep(tm, each = 2),
lon = lon.calib, lat = lat.calib,
rise = rise, zenith = 96), Rise = rise)
tsimagePoints(c.dat$Twilight, offset = offset, pch = 16, cex = 0.1,
col = ifelse(c.dat$Rise, "dodgerblue", "firebrick"))
d.track.tm <- as.POSIXct(c("2014-10-09", "2015-01-25"), tz = "GMT")
d.calib.tm <- as.POSIXct(c("2014-05-11", "2014-09-28"), tz = "GMT")
d.calib <- subset(d.lux, (Date>=d.calib.tm[1] & Date<=d.calib.tm[2]))
threshold <- 0.5
twl <- read.csv(paste(wd, "/AnalysisOutput/782/782_twl.csv", sep=""))
twl[,1] <- as.POSIXct(twl[,1], tz = "GMT")
twl <- twilightAdjust(twl, 300)
lightImage(d.lux, offset = offset, zlim = c(0, 12))
tsimagePoints(twl$Twilight, offset = offset, pch = 16, cex = 0.6,
col = ifelse(twl$Rise, "dodgerblue", "firebrick"))
### get zenith anfle and alpha parameters
twl_calib <- subset(twl, (Twilight>=d.calib.tm[1] & Twilight<=d.calib.tm[2]))
sun  <- solar(twl_calib[,1])
z    <- refracted(zenith(sun, lon.calib, lat.calib))
twl_t   <- twilight(twl_calib[,1], lon.calib, lat.calib, rise = twl_calib[,2], zenith = max(z)+0.01)
twl_dev <- ifelse(twl_calib$Rise, as.numeric(difftime(twl_calib[,1], twl_t, units = "mins")),
as.numeric(difftime(twl_t, twl_calib[,1], units = "mins")))
hist(twl_dev[!twl_calib$Rise], freq = F, ylim = c(0, 0.065),
main = "Stonechat 782 twilight error", xlab = "Twilight error (min)")
seq <- seq(0, 80, length = 100)
fitml_ng <- fitdistr(twl_dev[!twl_calib$Rise], "log-Normal")
lines(seq, dlnorm(seq, fitml_ng$estimate[1], fitml_ng$estimate[2]),
col = "firebrick", lwd = 3, lty = 2)
alpha =  c(fitml_ng$estimate[1], fitml_ng$estimate[2])
twl <- subset(twl, Twilight>=(d.track.tm[1]-(4*24*60*60)))
zenith0 <- median(z)
tol <- 0.1
tFirst  <- twl[twl$Deleted==F,1][-nrow(twl[twl$Deleted==F,])]  #twl[-nrow(twl),1]
tSecond <- twl[twl$Deleted==F,1][-1]  #twl[-1, 1]
type <- ifelse(twl[twl$Deleted==F,2], 1, 2)[-nrow(twl[twl$Deleted==F,])]
twl_gl <- data.frame(tFirst = tFirst, tSecond = tSecond, type = type)
cL <- changeLight(twl_gl, quantile = 0.75, days = 1, summary = F)
sites <- cL$site
fixed <- matrix(FALSE, ncol = 2, nrow = nrow(twl_gl))
fixed[1:4,] <- cbind(TRUE, TRUE)
cL <- changeLight(twl_gl, quantile = 0.75, days = 1, summary = F)
cL <- changeLight(twl_gl, quantile = 0.75, days = 1, fixed = fixed, summary = F)
sites <- cL$site
```
xlim = c(100,150)
log.prior
beta0 <- matrix(c(1, 0.2, 9, 0.25), 2, 2, byrow = T)
matplot(0:80, cbind(dgamma(0:80, beta0[1, 1], beta0[1, 2]),
dgamma(0:80, beta0[2, 1], beta0[2, 2])),
type = "l", col = c("red","blue"), lty = 1, lwd = 2, ylab = "")
beta <- matrix(c(ifelse(cL$site==0, beta0[2,1], beta0[1,1]),
ifelse(cL$site==0, beta0[2,2], beta0[1,2])), ncol = 2)
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
x0[1:3,1] <- lon.calib
x0[1:3,2] <- lat.calib
fixedx <- c(rep(TRUE, 3), rep(FALSE, nrow(twl)-3))
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=quantile(z, probs = 0.90),fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=250,thin=20,chains=1)
# plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
# xm <- locationMean(fit$x)
# lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
# points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
# box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=quantile(z, probs = 0.90),fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=1)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
s <- locationSummary(fit$z,time=model$time,collapse=F)
plot(wrld_simpl,xlim=range(s$Lon.mean[[1]]),ylim=range(s$Lat.mean[[1]]),col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(c("#E41A1C", "#377EB8")[k]))/255,alpha=0.4))
}
box()
s <- locationSummary(fit$z,time=model$time,collapse=F)
plot(wrld_simpl,xlim=range(s$Lon.mean[[1]]),ylim=range(s$Lat.mean[[1]]),col = "grey90",border = "grey10")
s$Lat.mean
head(s)
range(s[[1]]'Lat.mean'])
s[[1]]
plot(wrld_simpl,xlim=range(s[[1]][,'Lon.mean']),ylim[,=range(s[[1]][,'Lat.mean']),col = "grey90",
border = "grey10")
border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
plot(wrld_simpl,xlim=range(s[[1]][,'Lon.mean']),ylim,=range(s[[1]][,'Lat.mean']),col = "grey90", border = "grey10")
range(s[[1]][,'Lon.mean'])
plot(wrld_simpl,xlim=range(s[[1]][,'Lon.mean']),ylim=range(s[[1]][,'Lat.mean']),col = "grey90", border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(c("#E41A1C", "#377EB8")[k]))/255,alpha=0.4))
}
box()
zm <- locationSummary(fit$z,time=model$time,collapse=T)
twl.back <- data.frame(Twilight = twilight(twl$Twilight[-nrow(twl)], zm$`Lon.50%`, zm$`Lat.50%`,
twl$Rise[-nrow(twl)], zenith=zenith0, iters = 5),
Rise = twl$Rise[-nrow(twl)])
lightImage(d.lux,offset=offset, zlim = c(0,12))
tsimagePoints(twl.back$Twilight,offset=offset,pch=16,cex=0.8,
col=ifelse(twl.back$Rise,"dodgerblue","firebrick"))
twl.gl <- data.frame(tFirst = twl.back[-nrow(twl.back),1],
tSecond = twl.back[-1, 1],
type = ifelse(twl.back[,2], 1, 2)[-nrow(twl.back)])
fixed <- matrix(FALSE, ncol = 2, nrow = nrow(twl.gl))
fixed[1:8,] <- cbind(TRUE, TRUE) # the points falling into the vicinity of the breeding site
cL <- changeLight(twl.gl, quantile = 0.9, days = 2, fixed = fixed, summary = F)
mS <- mergeSites(twl.gl, site = cL$site, fixed = fixed, distThreshold = 250, degElevation = 90-zenith0)
siteMap(cbind(zm$`Lon.50%`, zm$`Lat.50%`), site = mS$site, xlim = xlim, ylim = ylim, type = 'cross', hull = F)
schedule(twl.gl[,1], twl.gl[,2], site = mS$site)
