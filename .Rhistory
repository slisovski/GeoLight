fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=cL$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
mS <- mergeSites(twl = twl.gl, site = cL$site, degElevation = 90-zenith0, distThreshold = 350,
fixed = fixed)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=mS$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97.5,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
path <- thresholdPath(twl$Twilight, twl$Rise, zenith = zenith0, tol = tol)
x0 <- path$x
## Adjust breeding site location and first few and last locations
## Marker==1 for first 1 and last 1 positions
twl$Marker[c(1:4, (nrow(twl)-3):nrow(twl))] <- 1
x0[twl$Marker==1,1] <- lon.calib
x0[twl$Marker==1,2] <- lat.calib
x0[twl$Marker==2,1] <- breeding.site[1]
x0[twl$Marker==2,2] <- breeding.site[2]
fixedx <- twl$Marker!=0
## Intermediate track
z0 <- trackMidpts(x0)
#write.csv(data.frame(path$time, x0), paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_path.csv", sep=""), row.names = FALSE)
#------------------------------------------------------------------------#
#--  SECTION 4: Mask                                                   --#
#------------------------------------------------------------------------#
## defining the boundaries
xlim = c(95, 179)
ylim = c(-47, 85)
source("N:/Geolocation/Mask/ProbMask.R")
#------------------------------------------------------------------------#
#--  SECTION 5: Model parameter                                        --#
#------------------------------------------------------------------------#
beta = c(0.7, 0.05)
# plot(0:80, dgamma(0:80, beta[1], beta[2]), type = "l", col="red")
alpha =  c(2.1, 0.9)
#------------------------------------------------------------------------#
#--  SECTION 5: Estelle simulation                                     --#
#------------------------------------------------------------------------#
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="ModifiedLogNormal",
alpha=alpha,beta=beta,
x0=x0,z0=z0,zenith=97.25,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,iters=600,thin=20,chains=1)
plot(wrld_simpl,col= "grey90", border="grey10", xlim = range(x0[,1]), ylim = range(x0[,2]))
xm <- locationMean(fit$x)
lines(xm,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.9))
points(xm,pch=16,cex=0.8,col=rgb(t(col2rgb("cornflowerblue"))/255,alpha=0.5))
box()
x0 <- chainLast(fit$x)
z0 <- chainLast(fit$z)
model <- thresholdModel(twl$Twilight,twl$Rise,
twilight.model="LogNormal",
alpha=alpha,beta=beta,
logp.x=log.prior,logp.z=log.prior,
x0=x0,z0=z0,zenith=97.25,fixedx=fixedx)
proposal.x <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.005,0.005)),n=nlocation(z0))
fit <- estelleMetropolis(model,proposal.x,proposal.z,
iters=300,thin=20,chains=2)
for(k in 1:3) {
proposal.x <- mvnorm(chainCov(fit$x),s=0.2)
proposal.z <- mvnorm(chainCov(fit$z),s=0.2)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=300,thin=20,chains=2)
}
proposal.x <- mvnorm(chainCov(fit$x),s=0.25)
proposal.z <- mvnorm(chainCov(fit$z),s=0.25)
fit <- estelleMetropolis(model,proposal.x,proposal.z,
x0=chainLast(fit$x),
z0=chainLast(fit$z),
iters=2000,thin=20,chains=2)
sr.col <- "#FF7F00"
ss.col <- "#377EB8"
mn.col <- "firebrick1"
ci.col <- "dodgerblue1"
asm.col <- "grey70"
trk.col <- "steelblue"
map1.col <- "honeydew3"
map2.col <- "honeydew4"
grp.pal <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
s <- locationSummary(fit$x,time=fit$model$time,collapse=F)
plot(wrld_simpl,xlim=xlim,ylim=ylim,col = "grey90",border = "grey10")
plot(elide(wrld_simpl,shift=c(360,0)),xlim=xlim,ylim=ylim,add=T, col = "grey90",border = "grey10")
for(k in 1:length(s)) {
lines(s[[k]][,"Lon.mean"],s[[k]][,"Lat.mean"],
col=rgb(t(col2rgb(grp.pal[k]))/255,alpha=0.4))
}
box()
zm <- locationSummary(fit$z,time=fit$model$time,collapse=T)
twl.back <- data.frame(Twilight=twilight(fit$model$time[-length(fit$model$time)],
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lon.50%'),
ifelse(twl$Marker[-nrow(twl)]==2, 0, zm$'Lat.50%'),
fit$model$rise[-length(fit$model$time)],zenith=zenith0,iters=5),
Rise=fit$model$rise[-length(fit$model$time)])
## remove NA
ind0 <- which(is.na(twl.back$Twilight))
zenithS=zenith0
repeat{
zenithS <- zenithS+1
twl.back$Twilight[ind0] <- twilight(fit$model$time[ind0], zm$'Lon.50%'[ind0], zm$'Lat.50%'[ind0], fit$model$rise[ind0], zenith=zenithS, iters=5)
if(all(!is.na(twl.back$Twilight[ind0]))) break
}
twl.back$breed <- ifelse(twl.back$Twilight>=min(twl$Twilight[twl$Marker==2]) & twl.back$Twilight<=max(twl$Twilight[twl$Marker==2]), TRUE, FALSE)
lightImage(d.lux,offset=offset,zlim=c(0,12))
tsimagePoints(twl.back$Twilight,offset=offset,pch=16,cex=0.8,
col=ifelse(twl.back$Rise,"dodgerblue","firebrick"))
twl.gl <- data.frame(tFirst=twl.back[-nrow(twl.back),1],
tSecond=twl.back[-1,1],
type=ifelse(twl.back[,2],1,2)[-nrow(twl.back)])
tmp01 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
tmp02 <- which(twl.gl$tFirst>=min(twl$Twilight[twl$Marker[-nrow(twl)]==2]) & twl.gl$tFirst<=max(twl$Twilight[twl$Marker[-nrow(twl)]==2]))
fixed <- matrix(FALSE, nrow = nrow(twl.gl), ncol = 2)
fixed[c(1:5, tmp01, (nrow(twl.gl)-1):nrow(twl.gl)),1] <- TRUE
fixed[c(1:5, tmp02, (nrow(twl.gl)-1):nrow(twl.gl)),2] <- TRUE
# changeLight analysis
cL <- changeLight(twl = twl.gl,
quantile = 0.8, fixed = fixed, days = 1, summary = T)
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=cL$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
mS <- mergeSites(twl = twl.gl, site = cL$site, degElevation = 90-zenith0, distThreshold = 350,
fixed = fixed)
save(fit, file = paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_fit.RData", sep=""))
siteMap(cbind(zm$'Lon.50%',zm$'Lat.50%'),site=mS$site,xlim=xlim,ylim=ylim,type='cross',hull=F)
zm <- locationSummary(fit$z,time=fit$model$time,collapse=T)
zm$site <- c(mS$site,NA)
write.csv(zm, paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_summary.csv", sep=""), row.names = F)
## Schedule
tm <- as.POSIXct(apply(cbind(zm[,1], zm[,2]), 1 , mean), tz="GMT", origin="1970-01-01")
site <- zm$site
arr <- tm[which(!is.na(site) & !duplicated(site) & site>0)]
dep <- tm[which(!is.na(site) & !duplicated(site, fromLast = T) & site>0)]
out <- data.frame(Site =  letters[1:length(arr)], Arrival = arr, Departure = dep)
if(!is.na(site[1])) out$Arrival[1] <- NA
if(!is.na(site[length(tm)])) out$Departure[nrow(out)] <- NA
out$Days <- round(apply(out, 1, function(x) as.numeric(difftime(x[3], x[2], units = "days"))),2)
out$Lon <- round(aggregate(zm[site>0, c("Lon.50%", "Lat.50%")], by = list(site[site>0]), median)[,2],1)
out$Lat <- round(aggregate(zm[site>0, c("Lon.50%", "Lat.50%")], by = list(site[site>0]), median)[,3],1)
tmp2      <- data.frame(Site = paste0("mig", 1:(nrow(out)-1)), Arrival = out$Departure[-nrow(out)],
Departure = out$Arrival[-1], Days = NA, Lon = NA, Lat = NA)
tmp2$Days <- round(apply(tmp2, 1, function(x) as.numeric(difftime(x[3], x[2], units = "days"))),2)
out <- rbind(out, tmp2)
out <- out[order(out[,3]),]
require(geosphere)
out$Distance <- NA
for(k in 1:nrow(out)) {
if(is.na(out$Lat[k])){
out$Distance[k] <- round(distVincentySphere(c(out$Lon[k-1], out$Lat[k-1]),
c(out$Lon[k+1], out$Lat[k+1]))/1000,1)
}
}
out$Site <- as.character(out$Site)
out$Site[which(as.character(out$Site)==letters[as.numeric(names(table(zm$site[which(twl$Marker[-nrow(twl)]==2)])))[
which.max(table(zm$site[which(twl$Marker[-nrow(twl)]==2)]))]])] <- "breed"
write.csv(out, paste(wd, "/AnalysisOutput/Turnstone/", ID, "/", ID, "_schedule.csv", sep=""), row.names = F)
library(GeoLight)
setwd("~/Documents/GitHub/NAOC_Geos_2016")
twl <- read.csv("data/749_twl.csv")
## make sure the datetime columns are in the correct format
twl$tFirst <- as.POSIXct(twl$tFirst, "GMT")
twl$tSecond <- as.POSIXct(twl$tSecond, "GMT")
## provide a sun angle for the light threshold value
cal1 = -5.52
track <- coord(twl = twl, degElevation = cal1, tol = 0,
method = "NOAA", note = TRUE)
tripMap(track, equinox = TRUE, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
l.filt = loessFilter(twl, k = 3, plot = TRUE)
tripMap(track[l.filt,], equinox = TRUE, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
cl <- changeLight(twl, quantile = 0.95, days = 5, plot = TRUE, summary = TRUE)
cl <- changeLight(twl[all.filt,], quantile = 0.95, days = 5, plot = TRUE, summary = TRUE)
l.filt = loessFilter(twl, k = 3, plot = TRUE)
## The 2011 fall equinox was Sept 23
fall_eq <- as.POSIXct("2011-09-23")
## The 2012 spring equinox was March 20
spring_eq <- as.POSIXct("2012-03-20")
## how big a window (days)
window <- 25
fall_eq_start <- fall_eq - (window/2)*24*60*60 # POSXct dates are in seconds
fall_eq_end <- fall_eq + (window/2)*24*60*60
spring_eq_start <- spring_eq - (window/2)*24*60*60
spring_eq_end <- spring_eq + (window/2)*24*60*60
fe.filt <- (twl$tFirst < fall_eq_start | twl$tSecond > fall_eq_end)
se.filt <- (twl$tFirst < spring_eq_start | twl$tSecond > spring_eq_end)
## multiply (logical AND) all the filters together
all.filt <- l.filt & fe.filt & se.filt
cl <- changeLight(twl[all.filt,], quantile = 0.95, days = 5, plot = TRUE, summary = TRUE)
siteMap(track, cl$site, type = "cross", hull = T, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
cl <- changeLight(twl[all.filt, ], quantile = 0.95, days = 5, plot = TRUE, summary = TRUE)
siteMap(track[all.filt, ], cl$site, type = "cross", hull = T, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-90,-70), ylim = c(10,60), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 200)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-90,-70), ylim = c(10,60), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-90,-70), ylim = c(10,60), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-85,-73, ylim = c(10,60), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-85,-73), ylim = c(10,60), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-85,-73), ylim = c(10,60), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(10,60), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
siteMap(track[all.filt, ], cl$site, type = "cross", hull = T, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
points(ms$summary$Lon, ms$summary$Lat)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150)
?mergeSites
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150, alpha = c(0, 25))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150, alpha = c(0, 25))
cl <- changeLight(twl[all.filt, ], quantile = 0.95, days = 5, plot = TRUE, summary = TRUE)
cl <- changeLight(twl[all.filt, ], quantile = 0.9, days = 5, plot = TRUE, summary = TRUE)
siteMap(track[all.filt, ], cl$site, type = "cross", hull = T, xlim = c(-90,-70), ylim = c(10,50), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150, alpha = c(0, 25))
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 150)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
points(ms$summary$Lon, ms$summary$Lat)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 100)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 75)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-73), ylim = c(20,50), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,50), legend = TRUE)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE)
points(ms$summary$Lon, ms$summary$Lat)
locator(n=1)
locator(n=1)
locator(n=2)
arrows(x0 = c(-80.36), y0 = c(42.69), x1 = c(-78.66), y1 = c(39.23))
arrows(x0 = c(-80.36), y0 = c(42.65), x1 = c(-78.66), y1 = c(39.23))
arrows(x0 = c(-80.36), y0 = c(42.6), x1 = c(-78.66), y1 = c(39.23))
arrows(x0 = c(-80.36), y0 = c(42.4), x1 = c(-78.66), y1 = c(39.23))
locator(n=2)
arrows(x0 = c(-80.36, -78.26), y0 = c(42.4, 38.57), x1 = c(-78.66, -77.13), y1 = c(39.23, 36.70))
locator(n=2)
arrows(x0 = c(-80.36, -78.26, -78.68), y0 = c(42.4, 38.57, 31.49),
x1 = c(-78.66, -77.13, -80.51), y1 = c(39.23, 36.70, 24.54))
locator(n=2)
arrows(x0 = c(-80.36, -78.26, -77.09), y0 = c(42.4, 38.57, 35.77),
x1 = c(-78.66, -77.13, -80.42), y1 = c(39.23, 36.70, 24.92))
arrows(x0 = c(-80.36, -78.26, -77.09), y0 = c(42.4, 38.57, 35.77),
locator(n=2)
arrows(x0 = c(-80.36, -78.26, -77.09, 80.65), y0 = c(42.4, 38.57, 35.77, 25.86),
x1 = c(-78.66, -77.13, -80.42, -80.46), y1 = c(39.23, 36.70, 24.92, 38.88))
locator(n=2)
arrows(x0 = c(-80.36, -78.26, -77.09, -80.65), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.46), y1 = c(39.23, 36.70, 24.92, 38.689))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE)
arrows(x0 = c(-80.36, -78.26, -77.09, -80.65), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.46), y1 = c(39.23, 36.70, 24.92, 38.689))
arrows(x0 = c(-80.36, -78.26, -77.09, -82.65), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -82.46), y1 = c(39.23, 36.70, 24.92, 38.689))
arrows(x0 = c(-80.36, -78.26, -77.09, -80.85), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.66), y1 = c(39.23, 36.70, 24.92, 38.689))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE)
arrows(x0 = c(-80.36, -78.26, -77.09, -80.85), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.66), y1 = c(39.23, 36.70, 24.92, 38.689))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2)
arrows(x0 = c(-80.36, -78.26, -77.09, -80.85), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.66), y1 = c(39.23, 36.70, 24.92, 38.689))
ms$site
ms <- mergeSites(twl[all.filt,], site = cl$site, degElevation = cal1, distThreshold = 75)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site))-1, start = 0.2, end = 0.8)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site))-1, start = 0.2, end = 0.8))
rainbow(length(unique(ms$site))-1, start = 0.2, end = 0.8)
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site)), start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site)), start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site)), start = 0.2, end = 0.8))
rainbow(length(unique(ms$site)), start = 0.2, end = 0.8)
?siteMap
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(length(unique(ms$site))-1, start = 0.2, end = 0.8))
ms$site
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(5, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(7, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(4, start = 0.2, end = 0.8))
mergeSites
siteMap
siteMap(track[all.filt,], ms$site, type = "points", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(4, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "points", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = c("black", rainbow(6, start = 0.2, end = 0.8)))
library(GeoLight)
library(GeoLight)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
library(GeoLight)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
library(GeoLight)
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = heat.colors(6))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = heat.colors(6, start = 0.2, end = 0.8))
siteMap(track[all.filt,], ms$site, type = "cross", hull = F, xlim = c(-84,-75), ylim = c(20,47), legend = TRUE,
pch = 16, cex  = 2, col = rainbow(6, start = 0.2, end = 0.8))
arrows(x0 = c(-80.36, -78.26, -77.09, -80.85), y0 = c(42.4, 38.57, 35.77, 25.74),
x1 = c(-78.66, -77.13, -80.42, -80.66), y1 = c(39.23, 36.70, 24.92, 38.689))
schedule(twl[all.filt,1], twl[all.filt,2], ms$site)
schedule(twl[all.filt,1], twl[all.filt,2], ms$site)
?distanceFilter
tab <- read.csv("~/Desktop/Thomas_MolEcol.csv")
tab$year <- as.factor(tab$year)
str(tab)
tab$success <- ifelse(tab$success=="successful", 1, 0)
tab <- subset(tab, deleted!=1)
library("lme4")
library("raster")
mod_A <- glm(success~female_age + male_age + female_hetero*male_hetero + year + institution, data = tab, family = "binomial")
summary(mod_A)
model <- glm(success~female_age + male_age + female_hetero*male_hetero, data = tab, family = "binomial")
summary(model)
plot(tab$female_age, tab$success, pch = 16,
col = rgb(.4,.4,.4, alpha = 0.5), xlab = "Age of Female [months]",
ylab = "breeding success", type = "n", las = 1)
agg01   <- aggregate(tab$success, by = list(tab$female_age, tab$institution), FUN = function(x) sum(as.numeric(x))/length(x))
agg02.m <- aggregate(tab$success, by = list(tab$female_age), FUN = function(x) sum(as.numeric(x))/length(x))
agg02.l <- aggregate(tab$success, by = list(tab$female_age), FUN = function(x) binom.test(sum(as.numeric(x)), length(x))$conf.int[1])
agg02.u <- aggregate(tab$success, by = list(tab$female_age), FUN = function(x) binom.test(sum(as.numeric(x)), length(x))$conf.int[2])
arrows(agg02.l$Group.1, agg02.l$x, agg02.l$Group.1, agg02.u$x, code = 3, angle = 90, length = 0.05)
points(agg02.m$Group.1, agg02.m$x, pch = 22, bg = "white", cex = 1.5)
mod.1 <- glm(success~female_age, data = tab,
family = "binomial")
newdata <- data.frame(female_age = seq(min(tab$female_age),
max(tab$female_age), length = 100))
preddat <- predict(mod.1, newdata=newdata, se.fit=TRUE)
with(preddat, lines(newdata$female_age, exp(fit)/(1+exp(fit)), col="red"))
with(preddat, lines(newdata$female_age, exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)), lty=2))
with(preddat, lines(newdata$female_age, exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)), lty=2))
lines(newdata$female_age, exp(fit)/(1+exp(fit))
exp(fit)/(1+exp(fit))
exp(fit)/(1+exp(fit)
)
exp(preddat$fit)/(1+exp(preddat$fit))
exp(preddat$fit+1.96*preddat$se.fit)/(1+exp(preddat$fit+1.96*preddat$se.fit))
exp(preddat$fit+1.96*preddat$se.fit)/(1+exp(preddat$fit-1.96*preddat$se.fit))
exp(preddat$fit-1.96*preddat$se.fit)/(1+exp(preddat$fit-1.96*preddat$se.fit))
tab$female_age
nrow(tab)
rm(list = ls())
library("TwGeos")                                 #load the BAStag package
# setwd("~/Documents/GitHub/NAOC_Geos_2016")
setwd("~/Documents/GitHub/NAOC_Geos_2016")
library("TwGeos")                                 #load the BAStag package
d.lig <- readLig("data/749_000.lig", skip = 0)    #read the data into a dataframe called d.lig
d.lig <- subset(d.lig,select=c("Date","Light"))   #reduce the dataframe to just Date and Light
plot(d.lig$Date[3000:5000], d.lig$Light[3000:5000], type = "o", pch = 16, cex = 0.5)
lightImage(d.lig, offset = 18, zlim = c(0, 64), dt = 120)
threshold = 2.5
plot(d.lig$Date[3000:5000], d.lig$Light[3000:5000], type = "o", pch = 16, cex = 0.5)
seed <- as.POSIXct(locator(n=1)$x, origin  = "1970-01-01", tz = "GMT")
twl  <- findTwilights(d.lig, threshold, include = seed)
lightImage(d.lig, offset = 18, zlim = c(0, 12), dt = 120)
tsimagePoints(twl$Twilight, offset = 12, pch = 16, cex = 0.5,
col = ifelse(twl$Rise, "dodgerblue", "firebrick"))
twl <- twilightEdit(twl, window = 4, outlier.mins = 45, stationary.mins = 25, plot = T)
lightImage(d.lig, offset = 18, zlim = c(0, 12), dt = 120)
tsimagePoints(twl$Twilight[!twl$Deleted], offset = 18, pch = 16, cex = 0.5,
col = ifelse(twl$Rise[!twl$Deleted], "dodgerblue", "firebrick"))
head(twl)
twl <- twilightAdjust(twl, 2*60)
head(twl)
twilightAdjust
library(GeoLight)
twl <- read.csv("data/749_twl.csv")
twl$tFirst <- as.POSIXct(twl$tFirst, "GMT")
twl$tSecond <- as.POSIXct(twl$tSecond, "GMT")
library(GeoLight)
## For a fast and simple map of locations:
## Call up the twlight data
twl <- read.csv("data/749_twl.csv")
twl$tFirst <- as.POSIXct(twl$tFirst, "GMT")
twl
library(TwGeos)
